# Робота с файлами
# with open('example.txt', 'w', encoding='UTF-8') as f:
#     f.write()


# lines = [line.strip() for line in open('example.txt', encoding='UTF-8')]
# print(lines)
#
# a = open('example.txt', encoding='UTF-8').read()
# line = list(map(str.strip, a.split('\n')))
# print(line)

# a = open('example.txt', encoding='UTF-8').read()
# for i in a.split():
#     if len(i)==6:
#         print(i)

# Копіювання файлів і директорій
# Модуль shutil містить параметри, які дозволяють копіювати, переміщувати, перейменовувати та видаляти файли.
import os
import shutil
# Копіювання здійснюється так:
#
# shutil.copy(джерело, шлях призначення)
# У першому параметрі в дужках нам порібно вказати шлях до файлу, який ми хочемо скопіювати, а в другому – шлях до каталогу, в який ми хочемо вставити файл. Обидва параметри мають рядковий тип, що означає, що ми прописуємо їх в одинарних лапках.
#
# У цьому випадку шлях записується за допомогою двох обернених скісних рисок \\.

# shutil.copy('C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python36-32\\example.txt', 'C:\\Users\\Admin\\Desktop\\new')
# shutil.copy('C:\\Users\\VIka\\Desktop\\моя папка\\ТЕСТИРОВАНИЕ\\5DuHXp.txt', 'C:\\Users\\VIka\\Desktop\\моя папка\\ТЕСТИРОВАНИЕ\\Практика')
# shutil.copytree()  # копіює всю папку та будь-які інші папки або файли, які вона містить.
# shutil.copytree(джерело, шлях призначення)

# Переміщення і перейменування файлів і директорій
# shutil.move(джерело, шлях призначення)
# shutil.move('C:\\bacon.txt', 'C:\\eggs\\new_bacon.txt') # вихідний файл переміщується та перейменовується:
# Цей приклад прекрасно працює, якщо папка під назвою "eggs" існує.
# Проте, якби цієї папки не існувало, move() перейменував б bacon.txt у файл під назвою "eggs".
# shutil.move('C:\\bacon.txt', 'C:\\eggs')

# Безповоротне і безпечне видалення файлів і директорій
# Видалення окремого файлу або порожнього каталогу може бути виконано шляхом імпорту модуля ОS,
# тоді як модуль shutil використовується для видалення папки та всього її вмісту.
# import OS
# os.unlink(path) # удаление пути к файлу
# os.rmdir(path) # удаление папки по пути, папка должна быть пустой
# shutil.rmtree(path) # удаление папки по пути, а также файла и подкаталогов, находящихся в ней без возвратно

# Оскільки вбудована функція Python shutil.rmtree() безповоротно видаляє файли та каталоги,
# її використання може бути небезпечним. Набагато кращим способом видалення файлів та каталогів є
# використання модуля send2trash. Цей модуль необхідно встановити, запустивши командний рядок на комп’ютері та
# задавши наступну команду:

# pip install send2trash #  ця функція буде відправляти файли та каталоги в Кошик Вашого комп'ютера, устанавливаем в командной строке
# import send2trash
# baconFile = open('bacon.txt', 'a')
# baconFile.write('Бекон не є овочем.')
# baconFile.close()
# send2trash.send2trash('bacon.txt')

# Стиснення файлів: zipfile
# Читання ZIP файлів
# Щоб прочитати вміст ZIP файлу, спочатку нам необхідно створити обєкт ZipFile (у нашому прикладі це exampleZip)
# за допомогою функції zipfile.ZipFile(). Перший zipfile – це ім'я модуля Python, а другий ZipFile – це ім'я функції.
import zipfile
exampleZip = zipfile.ZipFile('example.zip')
exampleZip = zipfile.ZipFile('example.zip')
exampleZip.namelist()
spamInfo = exampleZip.getinfo('spam.txt')
spamInfo.file_size
spamInfo.compress_size
exampleZip.close()
# У першому рядку коду ми імпортуємо модуль zipfile, щоб мати змогу працювати з необхідними функціями.
# Далі ми створюємо exampleZip (який є об'єктом ZipFile) за допомогою функції ZipFile(),
# яку ми продовжимо використовувати в коді, та яка в каталозі посилається на файл example.zip.
#
# У об'єкта ZipFile є метод namelist(), який повертає список рядків для всіх файлів та каталогів,
# що містяться у ZIP файлі. Функція getInfo() повертає інформацію про файл, який міститься у папці ZIP,
# наприклад, про розмір вихідного файлу та розмір стиснутого файлу. Якщо об'єкт ZipFile представляє собою
# весь архівний файл, то об'єкт ZipInfo містить корисну інформацію про один файл в архіві.

# Відкриття ZIP файлів
# Метод extractall() розархівовує всі файли та папки з ZIP файлу в каталог, в якому знаходиться програма.
#
# import zipfile, os
#    os.chdir('C:\\')
#    exampleZip = zipfile.ZipFile('example.zip')
#         exampleZip.extractall()
#    exampleZip.close()
# Крім того, ми можемо передати ім'я папки в extractall(), щоб розархівувати файли в папку,
# що відсутня в поточному каталозі нашої програми. Якщо шлях, переданий методу extractall(), не існує, він буде створений.
#
# Метод extract() розархівовує окремі файли ZIP файлу.
#
# exampleZip.extract('spam.txt')
# exampleZip.extract('spam.txt', 'C:\\some\\new\\folders')
# exampleZip.close()
# Рядок, який ми передаємо методу extract(), повинен збігатися з одним із рядків, що повертаються namelist(),
# наприклад, у нашому прикладі таким є spam.txt. Крім того, шлях, куди файл буде розархівовано,
# при умові, що він не є поточним каталогом, може вказуватися як другий аргумент.
# Якщо папка з другого аргументу не існує, Python створить її. Значення, що повертається extract() – це абсолютний шлях,
# за яким розархівовано файл.
#
# Створення ZIP файлів
# Для створення власного ZIP файлу нам необхідно активувати режим запису при створенні об'єкта ZipFile,
# тобто вказати другий аргумент як 'w'. Коли ми передамо шлях до методу write(), Python стисне файл за вказаним
# шляхом та додасть його до ZIP файлу. Перший аргумент методу write() – це рядок імен файлів, які потрібно додати.
# Другий аргумент – compress_type, який повідомляє комп’ютеру алгоритм, що буде використовуватися для стиснення файлів.
#
# Значення compress_type завжди можна задавати як zipfile.ZIP_DEFLATED.
#
# Такий тип стиснення добре працює для всіх типів даних.
#
# import zipfile
# newZip = zipfile.ZipFile('new.zip', 'w')
# newZip.write('spam.txt', compress_type=zipfile.ZIP_DEFLATED)
# newZip.close()
# У цьому прикладі ми створюємо новий ZIP файл під назвою "new.zip", який містить стиснутий файл "spam.txt".
#
# Зауважте, що, як і під час запису в файл, режим 'w' видаляє весь поточний вміст ZIP файлу.
# Якщо Вам потрібно додати файл до існуючого ZIP файлу, передайте "a" як другий аргумент для ZipFile.
# ZipFile відкриє файл у режимі додавання запису.
#
# f = open('зарахування.txt', 'a')
# print('Це рядок 3.', file=f)
# print('Це рядок 4.', file=f)
# f.close()
# Тут текст буде введено в існуючий файл writing.txt, тому новий вміст додається до вже наявного тексту.

