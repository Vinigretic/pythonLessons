# Д/з от 22,08

# Задача №1

# 1. Дано расстояние s в сантиметрах. Найти количество полных метров в нем (1 метр = 100 см).

# x = int(input('Введите число: '))  # Заданная площать в сантиметрах
# print('Количество полных метров', x // 100, 'м.')

# Задача №2
# Дана сторона квадрата a. Найти его периметр P = 4*a. Найти его площадь S = a**2.

# x = float(input('Введите число '))  # Заданная сторона квадрата
# print(4 * x)  # Периметр квадрата формула

# x = float(input('Введите число '))  # Заданная сторона квадрата
# print(x ** 2)  # Площать квадрата формула

# x = float(input('Введите число '))  # Заданная сторона квадрата
# print(pow(x, 2))  # Площадь квадрата формула

# Корректное решение
# x = int(input('Введите число: '))  # Заданная сторона квадрата
# print('Периметр квадрата P =', 4 * x)  # Периметр квадрата формула
# print('Площадь квадрата S =', x ** 2)  # Площать квадрата формула


# Задача №3
# Даны два различных числа. Вычесть из большего числа меньшее и выдать разницу чисел.

# Корректное решение
# a = int(input('Введите первое число: '))  # Заданное число а
# b = int(input('Введите второе число: '))  # Заданное число в
# # if a > b:
# #     print(a - b)  # Вычитаем из большего числа меньшее
# # else:
# #     print(b - a)  # Вычитаем из большего числа меньшее
# print(abs(a - b))

# a, b = int(input('Введите число ')), int(input('Введите число '))  # Заданные числа а
# if a > b:
#     print(a-b)  # Вычитаем из большего числа меньшее
# elif a < b:
#     print(b-a)  # Вычитаем из большего числа меньшее
# else:
#     print(0)

# Задача №4
# Даны три числа: 2 положительных и одно отрицательное. Выдать произведение положительных чисел.

# Корректное решение

# a, b, c = int(input('Введите число ')), int(input('Введите число ')), int(input('Введите число '))
# if c < 0:
#     print(a * b)
# elif a < 0:
#     print(b * c)
# else:
#     print(a * c)


# a, b, c = int(input('Введите число ')), int(input('Введите число ')), int(input('Введите число '))
# elif a < 0 and b > 0 and c > 0:
#     print(b * c)
# elif b < 0 and a > 0 and c > 0:
#     print(a * c)


# Задача №5
#  Даны два числа не равные нулю. Если оба числа положительные, то выдать их сумму,
#  если оба числа отрицательные, то выдать их произведение,
#  если числа положительное и отрацительное, то выдать квадрат положительного числа (number**2).

# Корректное решение
# a, b = int(input('Введите число ')), int(input('Введите число '))
# if a > 0 and b > 0:
#     print(a + b)
# elif a < 0 and b < 0:
#     print(a * b)
# elif a > 0:
#     print(a ** 2)
# else:
#     print(b ** 2)



# a, b = int(input('Введите число ')), int(input('Введите число '))
# if a > 0 and b > 0:
#     print(a + b)
# elif a < 0 and b < 0:
#     print(a * b)
# elif a > 0 and b < 0:
#       print(a ** 2)
# elif a < 0 and b > 0:
#     print(b ** 2)
# else:
#     print(0)


# Д/з от 21,08

# Задача № 1
# 1. Даны три переменные: A, B, C. Если их значения упорядочены по возрастанию или убыванию,
# то удвоить их; в противном случае заменить значение каждой переменной на 0.
# Вывести новые значения переменных A, B, C.
# a, b, c = int(input('Введите первое число: ')), int(input('Введите второе число: ')), int(input('Введите третье число: '))
# if a > b > c or a < b < c:
#     a, b, c = a * 2, b * 2, c * 2
# else:
#     a, b, c = 0, 0, 0
#     # a = b = c = 0
# print('Значение первой переменной =', a, 'Значение второй переменной =', b, 'Значение третьей переменной =', c)

# Задача №2

# Напишите простой калькулятор, который считывает с пользовательского ввода три строки:
# первое число, второе число и операцию, после чего применяет операцию к введённым числам
# ("первое число" "операция" "второе число") и выводит результат на экран.
# Поддерживаемые операции: +, -, /, *.
# Если выполняется деление и второе число равно 0, необходимо выводить строку "Деление на 0!".
# Пример:
# 2
# 7
# *
# 14
# a, b = float(input('Введите первое число: ')), float(input('Введите второе число: '))
# c = input('Операция: ')
# if c == '+':
#     print(a + b)
# elif c == '-':
#     print(a - b)
# elif c == '*':
#     print(a * b)
# elif b:
#     print(a / b)
# else:
#     print('Деление на ноль!')

# Задача №3

# Даны две переменные A и B. Если их значения не равны, то присвоить каждой переменной
# большее из этих значений, а если равны, то присвоить переменным ноль.
# Вывести новые значения переменных A и B.
# a, b = int(input('Введите первое число: ')), int(input('Введите второе число: '))
# if a > b:
#     b = a
# elif a < b:
#     a = b
# else:
#     a, b = 0, 0
#     # a = b = 0
# print('Переменная  А =', a, 'Переменная В =', b)

# Задача №4
# Дано число 0 < n < 10. Вывести верно фразу "На лугу пасётся ", n "корова/коровы/коров".

# n = int(input("Введите количество коров: "))
# a = ''
# if n == 1:
#     a = 'а'
# elif 1 < n < 5:
#     a = 'ы'
# print('На лугу пасется', n, 'коров' + a)

# Д/з от 24/08
# Задача №1
# Дано число a в диапазоне 1-9999.
# Вывести к нему описание чётное/нечётное.
# Вывести к нему описание однозначное/двухзначное/трёхзначное/четырёхзначное.
# a = int(input('Введите число от 1 до 9999: '))
# b = a % 2  # остаток от деления
# c = ''
# if b == 0:
#     print('a - четное число')
# elif b:
#     print('a - нечетное число')
#
# if a < 10:
#     c = 'одно'
# elif 9 < a < 99:
#     c = 'двух'
# elif 99 < a < 999:
#     c = 'трех'
# elif a < 10000:
#     c = 'четырех'
# print('a -', c + 'значное число')
# корректное решение
# a = int(input('Введите число от 1 до 9999: '))
#
# if a % 2:
#     print('a - нечетное число')
# else:
#     print('a - четное число')
#
# c = 'четырех'
# if a < 10:
#     c = 'одно'
# elif 9 < a < 100:
#     c = 'двух'
# elif 99 < a < 1000:
#     c = 'трех'
# # else:
# #     c = 'четырех'
# print('a -', c + 'значное число')

# Задача №2
# Дано натуральное число a из n цифр. Вывести к нему описание "Это n-значное число".
# a = str(input('Введите число: '))
# n = 'и'
# if len(a) == 1:
#     n = ''
# elif len(a) < 5:
#     n = 'х'
# print('a -', str(len(a)) + n, 'значное число')

# a = str(input('Введите число: '))
# print('Это', str(len(a)) + '-значное число')


# Задача №3
# Введите текст, слово для поиска и слово замены.
# Программа проверяет, существует ли искомое слово.
# Если да, заменяет это слово заменяющим словом(слово замены) и перепечатывает текст,
# в противном случае он уведомляет вас, что искомое слово не найдено и замены нет.

# a = str(input('Введите текст: '))
# b = str(input('Введите слово для поиска: '))
# c = str(input('Введите слово замены: '))
# if b in a:
#     print(a.replace(b, c))
# else:
#     print('Искомое слово не найдено')

# Задача №4
# ДЗ, со строками.
# garden = 'В нашем саду растут 20 яблонь и 15 груш.'
# 1. Заменить 20 на 35.
# print(garden.replace('20', '35'))
# 2. Поменять местами "яблонь" и "груш" используя replace.
# print(garden.replace('груш', 'яблонь').replace('яблонь', 'груш', 1))
# 3. Поменять местами "яблонь" и "груш", используя split и join.
# garden = garden.split()
# garden[5], garden[8] = garden[8].replace('.', ''), garden[5] + '.'
# print(' '.join(garden))
# 4. В переменную мы получаем наше предложение garden.
# Нужно вывести  суммарное количество деревьев в саду. Цифры могут быть многозначными.
# garden = garden.split()
# print(int(garden[4]) + int(garden[7]))


# garden = 'В нашем саду растут 20 яблонь и 15 груш.'
# garden = garden.replace('20', '35').replace('яблонь', 'j').replace('груш', 'яблонь').replace('j', 'груш')
# print(garden)
# garden = garden.split()
# print(garden)
# garden = ['В', 'нашем', 'саду', 'растут', '35', 'груш', 'и', '15', 'яблонь.']
# garden[5] = 'яблонь'
# garden[8] = 'груш'
# print(garden)
# garden = ' '.join(garden)
# print(garden)


# ДЗ от 28/08
# Задача №1
# 0. Дано двузначное число. Вывести вначале его левую цифру (десятки), а затем — его правую цифру (единицы).

# a = input('Введите число: ')
# print(a[0])
# print(a[1])

# a = int(input('Введите число: '))
# print(a // 10)
# print(a % 10)

# 1. Дано двузначное число вида ab. Вывести квадрат числа ba (ba**2)
# a = int(input('Введите число: ')) / 10
# a = str(a).replace('.', ' ')
# a = a.split()
# a[0], a[1] = a[1], a[0]
# a = ''.join(a)
# a = int(a) ** 2
# print(a)

# a = input('Введите число: ')
# print(int(a[1] + a[0]) ** 2)

# a = int(input('Введите число: '))
# print((a % 10) * 10 + a //) 10 ** 2)



# Задача №2
# 2. Квадратное уравнение имеет вид ax2 + bx + c = 0 на вход в переменную stroka
# мы получаем от пользователя уравнение, выдать значение коэффициентов a, b, c.
# Учитываем, что они могут быть многозначными.
# Например: stroka = '6x2 - 12x + 10 = 0'  -> a = 6  b = -12  c = 10

# stroka = '6x2 + 12x - 10 = 0'
# stroka = stroka.replace('x2', 'x').replace('x', '')
# stroka = stroka.split()
# print('a =', stroka[0], '', 'b =', int(stroka[1] + stroka[2]), '', 'c =', int(stroka[3] + stroka[4]))

# Задача №3
# Решить уравнение ax+b=0. Мы получает от пользователя уравнение.
# Решите его и выведите целое значение x. Вывод должен быть именно в формате: "х=значение".
# Примеры:
# text = '2x+6=0'  ->  x=-3
# text = '-12x+24=0'  -> x=2
# text = '4x-100=0' -> x=25
#
# text = '4x-100=0'
# a = text.index('x')
# b = text.index('=0')
# n = text[:a]
# z = text[a + 1:b]
# x = -int(z) / int(n)
# print('x=' + str(int(x)))



#ДЗ:
# 1. Дано целое число. Посчитать количество нулей в числе.
# 1002 -> 2
# 50 -> 1
# # 0020 -> 1
# a = input('Введите число: ')
# print(a.lstrip('0').count('0'))

# a = input('Введите число: ')
# # if a == '0':
# #     print(1)
# # else:
# #     print(a.lstrip('0').count('0'))
# #
# # print(1 if a == '0' else a.lstrip('0').count('0'))
#
# print(str(int(a)).count('0'))

# 2. Дано целое число. Посчитать количество нулей в начале числа.
# 107 -> 0
# 0002001 -> 3
# 0 -> 1

# a = input('Введите число: ')
# print(len(a) - len(a.lstrip('0')))

# a = input('Введите число: ')
# print(len(a) - len(str(int(a))))

# 3. Дано целое число. Посчитать количество нулей в конце числа.
# 401 -> 0
# 8007000 -> 3
# 0 -> 1

# a = input('Введите число: ')
# print(len(a) - len(a.rstrip('0')))


# 4. Пользователь вводит слово. Поменять местами первую и последнюю буквы. слива -> аливс
# a = 'слива'
# print(a[-1] + a[1:-1] + a[0])

# 5. Пользователь вводит: "Фамилия Имя Отчество" - преобразовать в Фамилия инициалы: Иванов петр игоревич -> Иванов П.И.
# a = input('Введите Ф.И.О.: ')
# a = a.title().split()
# print(a[0], a[1][0] + '.' + a[2][0] + '.')

# 6. Исходные данные - время отправления и время прибытия автобуса. Найдите продолжительность поездки на автобусе.
# Вы можете рассчитывать, что вся поездка будет в течение одних суток. Дайте ответ в часах и минутах.
# '5:50, 7:40'  ->  '1:50'
# a = время отправления автобуса
# в = время прибытия автобуса
# date = '5:50, 7:40'
# a, b = date.split(', ')
# a, b = a.split(':'), b.split(':')
# a, b = int(a[0]) * 60 + int(a[1]), int(b[0]) * 60 + int(b[1])
# a, b = divmod(b - a, 60)
# print(str(a) + ':' + str(b))



# ДЗ, работа со списком:
# Есть произвольный список целых чисел:
# a = [15, 6, 17, 480, 9]
# 1. Посчитать сумму крайних элементов в списке.
# print(a[0] + a[-1])
# 2. Посчитать разницу между максимальным и минимальным элементом списка.
# print(max(a) - min(a))
# 3. Посчитать количество знаков в максимальном элементе.
# print(len(str((max(a)))))
# 4. Посчитать сумму элементов чётных позиций списка.
# print(sum(a[1::2]))
# 5. Посчитать квадрат центрального элемента в списке.
# print(a[len(a) // 2] ** 2)

# ДЗ:
# 1. Дан текст. Отредактировать его так, чтобы текст превратился в предложение,
# т.е. начинался с большой буквы и заканчивался точкой.
# Примеры:
# "greetings, friends." -> "Greetings, friends."
# "Greetings, friends" -> "Greetings, friends."
# "Greetings, friends." -> "Greetings, friends."
# "welcome to New York" -> "Welcome to New York."

# a = input('Введите текст: ')
# print(a[0].upper() + a[1:].rstrip('.') + '.')

# 2. У учителя есть шоколадка размером n x m кусочков.
# Учитель решил, распределит шоколадку справедливо, и каждому ученику
# будет дано одинаковое количество кусочков, а оставшееся останется у него.
# Может произойти, что от шоколадки ничего не останется,
# но ученики очень добросовестны, поэтому, если у учителя не будет кусочка,
# а у учеников будет больше одного, тогда каждый отдаст по одному своему кусочку,
# но если у учеников есть только один кусочек, тогда учителю ничего не дадут.
# Если шоколадка слишком маленькая для деления между всеми учениками,
# то деления не будет и всё останется у учителя.
# Зная количество учеников s, размер шоколада n, m, распечатайте,
# сколько кусочков получит каждый ученик и учитель. Данные приведены в следующем порядке: n, m, s.
# # # Вывод должен быть в виде: У учителя X плиток, у ученика Y плиток.

# n = int(input('Сторона шоколада 1 : '))
# m = int(input('Сторона шоколада 2 : '))
# s = int(input('Кол-во учеников: '))
# a = n * m  # плитка шоколада
# teacher = a % s
# pupil = a // s
# if teacher == 0 and pupil > 1:
#     pupil -= 1
#     teacher = s
# print('У учителя', teacher, 'плиток, у ученика', pupil, 'плиток')

# if a < s:
#     print('У учителя', a, 'плиток, у ученика 0 плиток')
# elif a == s:
#     print('У учителя 0 плиток, у ученика 1 плиток')
# elif teacher == 0:
#     print('У учителя', s, 'плиток, у ученика',  int((a - s) / s),  'плиток')
# else:

# ДЗ:
# В переменной chess мы получаем какой-то любой фрагмент шахматной партии.
# Например:
# chess = '1. d2 e6 2. e4 d5 3. Кc3 c5 4. Кf3 O-O 5. e:d5 e:d5 6. Сe2 Кf6 7. O-O Сe7 8. Сg5 Кc6 9. d:c5 Сe6 10. Кd4 С:c5 11. Кb3 Сe7 12. Сf3 Кe5 13. Лe1 К:f3+ 14. Ф:f3 Лc8 15. h3 h6'
# 0. Распечатать первый ход партии: 1. d2 e6   Найти как можно больше решений.
# chess = '1. Кd2 Кe6 2. e4 d5 3. Кc3 c5 4. Кf3 O-O 5. e:d5 e:d5 6. Сe2 Кf6 7. O-O Сe7 8. Сg5 Кc6 9. d:c5 Сe6 10. Кd4 С:c5 11. Кb3 Сe7 12. Сf3 Кe5 13. Лe1 К:f3+ 14. Ф:f3 Лc8 15. h3 h6'
# print(' '.join(chess.split()[:3]))    # 1.
# x = chess.split()
# print(x[0], x[1], x[2])    # 2.
# print(chess.split(' 2.')[0])    # 3.
# print(chess[:chess.index(' 2.')])    # 4.
# print(chess.replace(chess[chess.index(' 2.'):], ''))    # 5.

# 1. Подсчитать сколько раз в партии ходили слонами.
# print(chess.count('С'))
# 2. Если в партии было больше ходов слонами,
# чем ладьями - напечатать "Слоны были активнее", если ладьями, то напечатать "Ладьи были активнее".
# if chess.count('С') > chess.count('Л'):
#     print("Слоны были активнее")
# else:
#     print("Ладьи были активнее")

# print("Слоны были активнее" if chess.count('С') > chess.count('Л') else "Ладьи были активнее")

# 3. Распечатать на каком ходу у белых была короткая рокировка: O-O.
# chess = chess.split('. O-O')
# chess = chess[0].split()
# print(chess[-1])
# print(chess.split('. O-O')[0].split()[-1])

# print(chess.split()[1::3].index('O-O') + 1)

# 4. Распечатать на каком ходу у чёрных была короткая рокировка: O-O.
# chess = chess.split()
# print(chess)
# chess = chess[2::3]
# print(chess)
# print(chess.index('O-O') + 1)

# print(len(chess.split()[2::3][:chess.split()[2::3].index('O-O')+1]))

# print(chess.split()[2::3].index('O-O') + 1)

# if 'O-O' in chess[0]:
#     chess = chess[0]
#     print(chess)
# else:
#     chess = chess[1]
#     print(chess)

# chess = chess.split('. O-O')
# chess = chess[0] if 'O-O' in chess[0] else chess[1]
# chess = chess.split('O-O')
# chess = chess[0].split()
# print(chess[-2].rstrip('.'))

# print(chess)
# print('O-O' in chess[0])
# chess = chess[0].split('O-O')
# chess = chess[0].split()
# print(chess[-2].rstrip('.'))



# ДЗ, работа со списком:
# a = [15, 6, 171, 48, 9, 7, 12, 90]
# 1. Вывести общую сумму двух первых и двух последних элементов списка.
# print(a[0] + a[1] + a[-1] + a[-2])
# print(sum(a[:2] + a[-2:]))
# 2. Если сумма элементов на чётных позициях больше, вывести "Чётные победили", если на нечётных - "Нечётные победили".
# if sum(a[::2]) < sum(a[1::2]):
#     print("Чётные победили")
# else:
#     print("Нечётные победили")

# x = "Чётные победили" if sum(a[::2]) < sum(a[1::2]) else "Нечётные победили"
# print("Чётные победили" if sum(a[::2]) < sum(a[1::2]) else "Нечётные победили")

# 3. Переставить последний элемент списка на первое место и вывести новый список.
# Использовать только функции работы со списком без слайсов.
# a.insert(0, a.pop())
# print(a)

# 4. C клавиатуры вводим через пробел 3 целых числа.
# Напишите программу, которая выводит в три строки: сначала максимальное, потом минимальное,
# после чего оставшееся число.


# a = input('Введите три целых числа через пробел: ')
# a = a.split()
# a = sorted([int(a[0]), int(a[1]), int(a[2])])
# print(max(a))
# print(min(a))
# print(a[1])

# ДЗ на множества:
# 1. Ребёнку нужно из кубиков с буквами сложить предложение "мама мыла раму".
# Какие кубики с буквами ему понадобятся? (кубика "пробел" не существует)
# a = "мама мыла раму"
# print(set(''.join(a.split())))

# a = "мама мыла раму"
# print(set(a).difference(' '))
# print(set(a) - {' '})

# 2. В школе десятибальная система.
# У Егора за эту неделю были такие оценки [3, 4, 7, 5, 1, 5, 9, 2, 9, 10].
# Напечатать каких оценок у него не было.
# a = [3, 4, 7, 5, 1, 5, 9, 2, 9, 10]
# b = set(range(1, 11))
# print(*b.difference(set(a)))
# 3. Егор любит ходить в лес.
# В первую неделю он был в лесу в такие дни ['пн', 'ср', 'чт', 'вс'],
# во вторую неделю ['вт', 'ср', 'чт', 'сб'],
# а в третью ['пн', 'ср', 'пт', 'вс']. Найти любимый день недели Егора для похода в лес.
# a = ['пн', 'ср', 'чт', 'вс']
# b = ['вт', 'ср', 'чт', 'сб']
# c = ['пн', 'ср', 'пт', 'вс']
# # a, b, c = set(a), set(b), set(c)
#
# print(set(a).intersection(b).intersection(c))   # главное присвоть в множество первую переменную, к которой применяется функция
# print(set(a) & set(b) & set(c))

# ДЗ:
# 1. Определить является ли предложение палиндромом (читается одинаково в обоих направлениях).
# Пример:
# text = 'А роза упала на лапу Азора' -> Это палиндром
# text = 'Роза упала' -> Это не палиндром

# text = 'А роза упала на лапу Азора'
# text = text.replace(' ', '').lower()
# print('Это палиндром' if text == text[::-1] else 'Это не палиндром')

# a = text.replace(' ', '').lower()
# b = text[::-1].replace(' ', '').lower()
# if text.replace(' ', '').lower() == text[::-1].replace(' ', '').lower():
#     print(text, 'является палиндромом')
# else:
#     print(text, 'не является палиндромом')


# DRY don't  repeat youself

# 2. Пользователь вводит слово. Поменять местами первую и последнюю буквы.
# слива -> аливс
# a -> a
# '' -> ''
# a = input('Введите слово: ')
# # print(a if len(a) < 2 else a[-1] + a[1:-1] + a[0])
# print(a if len(a) == 1 else a[-1:] + a[1:-1] + a[:1])  # что бы не было ошибoк когда у нас нет элемента по индексу
# используем слайс [-1:]

# ДЗ, работа со словарём:
# 1. Данны данные по средним температурам в неделю трёх месяцев лета.
# summer = {
#     'Июнь': [20, 22, 24, 28],
#     'Июль': [24, 25, 29, 32],
#     'Август': [25, 28, 31, 29]}
# 1. Вывести температуру первой недели лета.
# print(summer['Июнь'][0])
# 2. Вывести максимальную температуру в июне.
# print(max(summer['Июнь']))
# 3. Вывести минимальную температуру в июле.
# print(min(summer['Июль']))
# 4. Вывести максимальную температуру лета.
# print(max(summer['Июнь'] + summer['Июль'] + summer['Август']))
# print(max(sum(summer.values(), [])))
# print(max(max(summer.values(), key=max)))

# 5. Сравнить какой месяц был самый жаркий и вывести его название(суммировать температуры каждого месяца).
# a = sum(summer['Июнь'])
# b = sum(summer['Июль'])
# c = sum(summer['Август'])
# if b < a > c:
#     print('Июнь')
# elif a < b > c:
#     print('Июль')
# else:
#     print('Август')

# summer = {
#     'Июнь': [20, 22, 24, 28],
#     'Июль': [24, 25, 29, 32],
#     'Август': [25, 28, 31, 29]}
#
# summer.update({'Июнь': sum(summer['Июнь']), 'Июль': sum(summer['Июль']), 'Август': sum(summer['Август'])})
# print(max(summer, key=summer.get))


# print(max(summer, key=lambda x: sum(summer[x])))



# 2. Единицы массы пронумерованы следующим образом: 1 — грамм, 2 — килограмм, 3 — центнер, 4 — тонна.
# Дан номер единицы массы n (целое число в диапазоне 1–4) и масса тела m в этих единицах (вещественное число).
# Найти массу тела в килограммах.
# n=3 m=12 -> Масса равна 1200.0 кг
# n=1 m=100 -> Масса равна 0.1 кг
#
# mass_units = {1: 0.001, 2: 1, 3: 100, 4: 1000}
# n = int(input('Введите число: '))
# m = float(input('Введите число: '))
# print(f'Масса равна {m * mass_units[n]} кг')

# n = int(input('Введите число: '))
# m = float(input('Введите число: '))
# # mass_units = {1: m / 1000, 2: m, 3: m * 100, 4: m * 1000}
# print('Масса равна', {1: m / 1000, 2: m, 3: m * 100, 4: m * 1000}[n], 'кг')

#ДЗ:
# 0. Сколько чисел в интервале от 100 до 200, которые делятся на 17 без остатка?
# b = 0
# for i in range(100, 201):
#     if i % 17 == 0:
#         b += 1
# # print(b)

# b = [b + 1 for i in range(100, 201) if i % 17 == 0]
# print(sum(b))

# print(len([i for i in range(100, 201) if i % 17 == 0]))

# 1. Мы получаем список от пользователя вида spisok = [5, 0, -1, 3, -2, 10, -12, 20, 7].
# Вывести все положительные числа кратные 5 через запятую.
# spisok = [5, 0, -1, 3, -2, 10, -12, 20, 7]
# a = []
# for i in spisok:
#     if i > 0 and i % 5 == 0:
#         a.append(i)
# print(*a)

# print(*[i for i in spisok if i > 0 and i % 5 == 0], sep='+')

# 2. Мы получаем список от пользователя вида spisok = [5, 0, -1, 3, -2].
# Вывести наименьшее положительное число в списке.
# spisok = [5, 0, -1, 3, -2]
# for i in spisok[:]:
#     if i <= 0:
#         spisok.remove(i)
# print(min(spisok))

# a = []
# for i in spisok:
#     if i > 0:
#         a.append(i)
# print(min(a))

# for i in sorted(spisok):
#     if i > 0:
#         print(i)
#         break
# print(min(i for i in spisok if i > 0))

# 3. Написать программу, которая находит в списке spisok = [5, 4, -1, 0, -2, 0, 5, 4, 4, 7]число,
# которое встречается наибольшее количество раз.

# spisok = [5, 4, -1, 0, -2, 0, 5, 4, 4, 7]
# print(max(spisok, key=spisok.count))

# sp_count = []
# for i in spisok:
#     sp_count.append(spisok.count(i))
# print(spisok)
# print(sp_count)
# print(max(sp_count))
# ind = max(sp_count)
# print(sp_count.index(ind))
# ind_el = sp_count.index(ind)
# print(spisok[ind_el])

# a = []
# for i in spisok:
#     a.append(spisok.count(i))  # считает кол-во повторяющихся чисел в списке и выводит их в список
# print(spisok[a.index(max(a))])

# ДЗ, добавка:
# 1. У нас есть журнал оценок группы:
# magazine = {
#     'Иванов': [3, 7, 11, 10, 8],
#     'Петров': [6, 12, 4, 9, 9],
#     'Сидоров': [5, 10, 7, 5, 9]}
# Вывести "Лучший ученик Х, у него максимальный бал Y, минимальный бал Z"
#
# for i in magazine:
#     print(i, magazine[i], sum(magazine[i]))
#

# magazine_1 = {i: sum(magazine[i]) for i in magazine}
# a = max(magazine_1, key=magazine_1.get)
# print(f'Лучший ученик {a}, у него максимальный бал {max(magazine[a])}, минимальный бал {min(magazine[a])}')

# magazine_1 = {
# 'Иванов' : sum(magazine['Иванов']),
# 'Петров' : sum(magazine['Петров']),
# 'Сидоров' : sum(magazine['Сидоров'])}
# b = max(magazine[a])
# c = min(magazine[a])
# print('Лучший ученик', a + ',', 'у него максимальный бал', str(b) + ', минимальный бал', str(c) + '.')
# s1 = {i: i ** 2 for i in range(1, 11)}


# 2. Написать программу которая подсчитывает количество цифр в строке, например "Олимпиада в Сочи была в 2014 году" и их сумму.
# Вывод должен быть "В строке цифр: X, сумма этих цифр: Y"
# a = "Олимпиада в Сочи была в 2014 году"
# b = []
# c = 0
# for i in a.split()[5]:
#     b.append(int(i))
#     c = c + int(i)
# print('\"В строке цифр:', str(len(b)) + ',', 'сумма этих цифр:', str(c) + '\"'))


# a = "Олимпиада-14 в Сочи была в 2014 году"

# b = []
# for i in a:
#     if i.isdigit():
#         b.append(int(i))
# print(f"В строке цифр: {len(b)}, сумма этих цифр: {sum(b)}")

# b = [int(i) for i in a if i.isdigit()]
# print(f"В строке цифр: {len(b)}, сумма этих цифр: {sum(b)}")

# ДЗ:
# 1. Даны два целых числа A и B (A < B). Найти сумму квадратов всех чисел от A до B включительно.
# a = 3
# b = 9
# print(sum(i ** 2 for i in range(a, b + 1)))
#
# 2. Даны целые положительные числа A и B (A < B). Вывести все целые числа от A до B включительно;
# при этом каждое число должно выводиться с новой строки столько раз, каково его значение.
# Например:
# a = 2
# b = 4
# 22
# 333
# 4444
# a = 9
# b = 11
# print(*[i * str(i) for i in range(a, b + 1)], sep='\n')
# 3. У нас есть колода карт с мастями (♥♦♠♣) и карты от шестёрки до туза.
# Сформировать колоду вида: 6♦, 6♥, 6♠, 6♣ ... Т♣. Перемешать её и вывести первые случайные 6 карт.
# masti = '♥♦♠♣'
# number = ['6', '7', '8', '9', '10', 'В', 'Д', 'К', 'Т']
# # Можно ли решить задачу в одну строку?
# masti = '♥♦♠♣'
# number = ['6', '7', '8', '9', '10', 'В', 'Д', 'К', 'Т']
# a = set()
# for i in number:
#     for x in masti:
#         a.add(i + x)
# for _ in range(6): # если не используем переменную можем использовать просто нижнее подчеркивание
#     print(a.pop())
# a = {i + x for i in number for x in masti}
# print(a)
# b = {a.pop() for i in range(6)}
# print(b)

# print(*tuple({i + x for i in number for x in masti})[:6])



# a, b, *c = [1, 2, 3, 4, 5]
# print(a, b, c)

# b = [{i + x for i in number for x in masti}.pop() for i in range(6)]
# print(b)

# 4. Пользователь через пробел вводит целые числа в диапазоне [-20;20].
# Найти произведение тех чисел, которые находятся в диапазоне [2;10], если таких чисел нет - вывести "-1".
# Пример:
# 13 -1 0 1   -> -1
# 3 4 14 -1   -> 12

# a = input('')
# a = a.split()
# b = 1
# for i in a:
#     if 1 < int(i) < 10:
#         b *= int(i)
# print(-1 if b == 1 else b)


# 5. Вывести на экран таблицу умножения (от 1 до 10).

# for i in range(1, 11):
#     for j in range(1, 11):
#         # print(i, 'x', j, '=', i * j, end='\t\t')
#         print(f'{i:>2} x {j:>2} = {i * j:>3}', end=' ' * 5)
# #         # print(i * j, end=' ')
#     print()
#
# for i in range(1, 3):
#     for j in range(1, 11):
#         print(f'{i:>2} x {j:>2} = {i * j:>3}')
    # print()


    # print(f'{"Выравнивание":*>20}')
    # print(f'{"Выравнивание":*<20}')


# for i in range(1, 11):
#     for j in range(1, 6):
#         print(f'{i:>2} x {j:>2} = {i * j:>3}', end=' ' * 5)
#     print()
# for x in range(2):
#     for i in range(1, 11):
#         for j in range(1, 6):
#             # print(f'{i:>2} x {j + 5 * x:>2} = {i * (j + 5 * x):>3}', end=' ' * 5)
#             print(f'{j + 5 * x:>2} x {i:>2} = {i * (j + 5 * x):>3}', end=' ' * 5)
#         print()
#     print()

# 0. Таблица умножения.
# ДЗ на while:
# 1. Пользователь вводит по одному либо названия фруктов, либо целые числа. Стоп-слово - exit.
# Вывести в результате сумму чисел и список фруктов.
# a = []
# b = []
# c = []
# while True:
#     x = input('Введите текст: ')
#     if x == 'exit':
#         break
#     a.append(x)
# for i in a:
#     if i.isdigit():
#         b.append(int(i))
#     if i.isalpha():
#         c.append(i)
# print(sum(b), c)

# a = []
# b = 0
# while True:
#     x = input('Введите текст: ')
#     if x == 'exit':
#         break
#     if x.isdigit():
#         b += int(x)
#     else:
#         a.append(x)
# print(b, a)

# Дано число n. Выдать числа от 2 до n, рядом с каждым числом написать его делители (кроме самого числа).
# Например для n = 6:
# 2 - 1
# 3 - 1
# 4 - 1 2
# 5 - 1
# 6 - 1 2 3

# n = 6
# for i in range(2, n + 1):
#     print(i, '-', end=' ')
#     for j in range(1, i):
#         if i % j == 0:
#             print(j, end=' ')
#     print()


# 2. Напишите программу, которая считывает с клавиатуры по одному числа до тех пор,
# пока сумма введённых чисел не будет равна 0 и сразу после этого выводит сумму квадратов всех считанных чисел.
# a = 0
# b = 0
# while True:
#     x = int(input('Введите число: '))
#     a += x
#     b += x ** 2
#     if a == 0:
#         break
# print(b)

# 3. Пользователь вводит по одному числа. Стоп-слово "exit". Найти какая сумма больше чётных чисел или нечётных.
# a = 0  # четный
# b = 0  # нечетный
# while True:
#     x = input('Введите число: ')
#     if x == 'exit':
#         break
#     x = int(x)
#     if x % 2 == 0:
#         a += x
#     else:
#         b += x
# print('сумма четных больше' if a > b else 'сумма нечетных больше')
#




# Найти совершенные числа. Найти все совершенные числа до 1000.
# Совершенное число - это такое число, которое равно сумме всех своих делителей, кроме себя самого.
# Например, число 6 является совершенным, т.к. кроме себя самого делится на числа 1, 2 и 3, которые в сумме дают 6.
# for i in range(1, 1000):
#     x = 0
#     for j in range(1, i // 2 + 1):
#         if i % j == 0:
#             x += j
#     if x == i:
#         print(x)

# самое правильное решение
# for i in range(1, 1000):
#     if sum(j for j in range(1, i // 2 + 1) if i % j == 0) == i:
#         print(i)

# print(*[i for i in range(1, 1000) if sum(j for j in range(1, i // 2 + 1) if i % j == 0) == i], sep='\n')


# 24 - 1 2 3 4  6  8  12
#      1 3 6 10 16 24 36


# 0. Дано число n. Найти сумму S = 1**1 + 2**2 + ... + n**n
# n = 5
# a = [i ** i for i in range(1, n + 1)]
# print(sum(a), '=', ' + '.join([str(i) for i in a]))

# print(sum(i ** i for i in range(1, n + 1)), ' = ', *[i ** i for i in range(1, n + 1)], sep=' + ')
#
# 1. 5 рабочих выполняли определённую задачу. Время потраченное каждым из них мы получили в формате [часы, минуты, секунды].
# workers = {
#     1: [1, 10, 30],
#     2: [0, 20, 0],
#     3: [3, 35, 50],
#     4: [1, 40, 10],
#     5: [2, 10, 30]}
# # Посчитать общее затраченное время всеми рабочими и вывести его в секундах.
# a = []
# for i in workers.values():
#     a.append(i[0] * 60 * 60 + i[1] * 60 + i[2])
# print(sum(a))

# print(sum(x * 3600 + y * 60 + z for x, y, z in workers.values()))
# for x, y, z in [[1, 2, 3], [4, 5, 6]]:
#     print(x * y * z)

# 2. Дано число n. Подсчитать количество отверстий в цифрах в данном числе. Можно ли решить задачу в одну строку?
# Пример:
# n=168826
# Отверстий: 6

# n = '602288'
# b = ['6', '8', '9', '0']
# c = []
# d = []
# for i in n:
#     if i in b:
#         c.append(i)
#     d = []
# #     for j in c:
# #         if j == '8':
# #             d.append(j)
# print(len(c + d))


# print(sum(2 if i == '8' else 1 for i in n if i in '0689'))


# n = '600228'
# print(n.count('0') + n.count('6') + n.count('8') * 2 + n.count('9'))

# print(sum(n.count(i) for i in '06889'))

# 3. Пользователь с клавиатуры вводит целые числа по одному, количество введённых чисел неизвестно,
# ввод чисел заканчивается числом 0 (0 – признак окончания ввода, не входит в последовательность).
# Программа должна вывести два числа: длину последовательности (завершающий 0 не учитывается)
# и количество нечётных чисел, кратных 3.
#
# a = b = 0
#
# while True:
#     x = int(input('введите число :'))
#     if x == 0:
#         break
#     if x % 3 == 0 and x % 2:
#         a += 1
#     b += 1
# print('Количество нечётных чисел, кратных 3 =', a, 'Длина последовательности =', b)

# 4. Простейшая система проверки орфографии может быть основана на использовании списка известных слов.
# Если введённое слово не найдено в этом списке, оно помечается как "ошибка".
# Попробуем написать подобную систему.
# На вход программе первой строкой передаётся количество d известных нам слов,
# после чего на d строках указываются эти слова.
# Затем передаётся количество s строк текста для проверки, после чего s строк текста.
# Выведите уникальные "ошибки" в произвольном порядке. Работу производите без учёта регистра.
#
# Sample Input:
# 4
# champions
# we
# are
# Repik
# 3
# We are the champignons
# We Are The Champions
# Repic
#
# Sample Output:
# repic
# champignons
# the

# d = 'champions we are Repik'
# d = d.lower().split()
# print(len(d), *d, sep='\n')
# s = 'We are the champignons We Are The Champions Repic'
# s = s.lower().split(', ')
# print(len(s), *s, sep='\n')
# print()
# s = ' '.join(s).split()
# s = set(s)
# b = []
# for i in s:
#     if i not in d:
#         b.append(i)
# print(*b, sep='\n')

# Правильное решение
# a = int(input('Количество слов в словаре: '))
# d = [input('Словарь: ').lower() for _ in range(a)]
# b = int(input('Количество текста: '))
# s = ' '.join([input('Текс для проверки: ').lower() for _ in range(b)]).split()
# c = [i for i in set(s) if i not in d]
# print(*c, sep='\n')




# ДЗ:
# 0. Дан список чисел N.
# Вывести все содержащиеся в данном списке чётные числа в порядке возрастания,
# а затем нечётные в порядке убывания, а также их количество.
# a = [1, 8, 5, 3, 6, 9, 10, 26, 30, 103, 202]
# b = [i for i in a if not (i % 2)]
# c = [i for i in a if i % 2]
# print(sorted(b), len(b))
# print(sorted(c, reverse=True), len(c))

# print(sorted((i for i in a if i % 2 == 0)), len([i for i in a if i % 2 == 0]))
# print(sorted((i for i in a if i % 2 == 1), reverse=True), len([i for i in a if i % 2 == 1]))

# 1. Дан список из n чисел, одно из которых отлично от всех остальных, равных между собой.
# Определить порядковый номер числа, отличного от остальных.
# a = [1, 1, 5, 1] -> 3
# a = [5, 5, 5, 5, 1, 5] -> 5

# a = [1, 1, 5, 1]
# b = [a.count(i) for i in a]
# for i in a:
#     b.append(a.count(i))
# print(b.index(min(b)) + 1)


# print(a.index(min(a, key=a.count)) + 1)

# 2. Введите текст, слово для поиска и слово замены.
# Программа проверяет, существует ли искомое слово.
# Если да, заменяет это слово заменяющим словом(слово замены) и перепечатывает текст,
# в противном случае он уведомляет вас, что искомое слово не найдено и замены нет.
# s = "У нас, который год, живёт кот, которого Васькой зовут, вот такой кот."
# кот -> пёс
# s = "У нас, который год, живёт кот, которого Васькой зовут, вот такой кот."
# a = 'кот'
# b = 'пес'
# c = [i.replace(a, b) if i.strip(',.') == a else i for i in s.split(' ')]
# #
# for i in s.split(' '):
#    if i.strip(',.') == a:
#        i = i.replace(a, b)
#    c.append(i)
#
# s2 = ' '.join(c)
# print('Искомое слово не найдено' if s == s2 else s2)

# s = s.split()
# for i in s:
#     if i.strip(',.') == a:
#         s[s.index(i)] = b
# print(*s)
# for ind, i in enumerate(s):
#     if i.strip(',.') == a:
#        s[ind] = s[ind].replace(a, b)
# print(*s)
# s = "У нас, который год, живёт кот, которого Васькой зовут, вот такой кот."
# a = 'кот'
# b = 'пес'
# c = ''
# if a not in s:
#     print('искомое слово не найдено')
# else:
#     for i in s.split():
#        if i.replace(',','').replace('.', '') in a and len(i.replace(',','').replace('.', '')) == 3:
#            i = b + ','
#        c += i + ' '
#     print(c.rstrip(', ') + '.')

# s = "У нас, который год,  живёт кот, которого Васькой зовут, вот такой кот."
# a = 'пес'
# b = 'кот'
# c = []
# for i in s.split(' '):
#     if i.strip(',.') == b:
#         i = i.replace(b, a)
#     c.append(i)
# #
# if s == ' '.join(c):
#     print('искомое слово не найдено и замены нет')
# else:
#     print(' '.join(c))
#
# c = []
# if b not in s:
#     print('искомое слово не найдено')
# else:
#     for i in s.split(' '):
#         if i.strip(',.') == b:
#             i = i.replace(b, a)
#         c.append(i)
#     print(' '.join(c))


# 3. Введите любой текст и искомое слово. Программа находит,
# есть ли в тексте искомое слово и выдает ответ «Слово не найдено» или «Слово первый раз встретилось на ... позиции».
# Например:
# s = "У нас, который год, живёт кот, которого Васькой зовут, отличный кот-мышелов, вот такой кот."
# word = "кот"
# > Слово первый раз встретилось на 26 позиции
# s = "У нас, кот суперкот, который год, живёт кот, которого Васькой зовут, отличный кот-мышелов, вот такой кот."
# b = "кот"

# if b not in s:
#     print('Слово не найдено')
# else:
#     for i in s.split():
#         # print(i)
#         if i.strip(',.') == b:
#             s = s.split(i)
#             break
#     print('Слово первый раз встретилось на', len(s[0]), 'позиции')
# s = "У нас, кот суперкот, который год, живёт кот, которого Васькой зовут, отличный кот-мышелов, вот такой кот."
# b = "пес"
# s = s.split()

# for i in s:
#     if i.strip(',.') == b:
#         print(len(' '.join(s[:s.index(i) + 1])) - len(b))
#         break
#
# for ind, i in enumerate(s):
#     if i.strip(',.') == b:
#         print(len(' '.join(s[:ind + 1]).rstrip(',.')) - len(b) + 1)
#         break
# else:
#     print('Слово не найдено')


# flag = True
# for ind, i in enumerate(s):
#     if i.strip(',.') == b:
#         print(len(' '.join(s[:ind + 1]).rstrip(',.')) - len(b) + 1)
#         flag = False
#         break
# if flag:
#     print('Слово не найдено')



# ДЗ:
# 1. Каждый следующий элемент ряда Фибоначчи получается при сложении двух предыдущих.
# Начиная с 1 и 2, первые 10 элементов будут: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# Найдите сумму всех четных элементов ряда Фибоначчи по 2584 включительно.
# Фибоначчи, которые не превышают 5000.
# a = b = 1
# c = []
# for i in range(1, 5001):
#     a, b = b, a + b
#     if not a % 2 and a < 5001:
#         c.append(a)
#     if a > 5001:
#         break
# print(c)


# 2. Август и Беатриса играют в игру. Август загадал натуральное число от 1 до n.
# Беатриса пытается угадать это чисо, для этого она называет некоторые множества натуральных чисел.
# Август отвечает Беатрисе YES, если среди названных ей чисел есть задуманное или NO
# в противном случае. После нескольких заданных вопросов Беатриса запуталась в том,
# какие вопросы она задавала и какие ответы получила и просит вас помочь ей определить,
# какие числа мог задумать Август

# Входные данные
# Первая строка входных данных содержит число n — наибольшее число,
# которое мог загадать Август. Далее идут строки, содержащие вопросы Беатрисы.
# Каждая строка представляет собой набор чисел, разделенных пробелами.
# После каждой строки с вопросом идет ответ Августа: YES или NO.
#
# Наконец, последняя строка входных данных содержит одно слово HELP.
#
# Выходные данные
# Вы должны вывести все числа, которые мог задумать Август.
# Примеры
# входные данные:
# До какого числа? 10
# Введите числа: 1 2 3 4 5
# Правильно? YES
# Введите числа: 2 4 6 8 10
# Правильно? NO
# Введите числа: HELP
#
# выходные данные:
# 1, 3, 5
# print('входные данные: ')
# n = int(input('До какого числа?: '))
# numbers = set(range(1, n + 1))
# while True:
#     beat_answer = input('Введите числа: ')
#     if beat_answer == 'HELP':
#         break
#     beat_answer = {int(i) for i in beat_answer.split()}
#     august_answer = input('Ответ: ')
#     if august_answer == 'YES':
#         numbers = numbers.intersection(beat_answer)
#     else:
#         numbers = numbers.difference(beat_answer)
# print(*numbers, sep=', ')



# Найдите самый большой палиндром, полученный умножением двух трехзначных чисел.
# b = []
# for i in range(100, 1000):
#     for j in range(100, 1000):
#        a = str(i * j)
#        if a == a[::-1]:
#            b.append(int(a))
# print(max(b))

# print(max(i * j for i in range(100, 1000) for j in range(100, 1000) if str(i * j) == str(i * j)[::-1]))

# ДЗ:
# 0. Дан список целых чисел. Поменять местами его минимальный и максимальный элементы.
# s = [1, 7, 0, 5, 4, 8, 9] -> [1, 7, 9, 5, 4, 8, 0]

# s = [1, 7, 0, 5, 4, 8, 9]

# print(s[:s.index(min(s))] + s[s.index(max(s)):] + s[s.index(min(s)) + 1:-1] + s[s.index(min(s)):s.index(min(s)) + 1])
# a = min(s)
# b = max(s)
# s = s[:s.index(a)] + s[s.index(b):] + s[s.index(a) + 1:-1] + s[s.index(a):s.index(a) + 1]
# print(s)

# a = s.index(min(s))
# b = s.index(max(s))
# s[a], s[b] = s[b], s[a]
# print(s)

# 1. Напишите программу, которая считывает список чисел через пробел первой строки
# и число x из второй строки, затем программа выводит все позиции, на которых встречается число x  в переданном списке.
# Позиции нумеруются с нуля, если число x не встречается в списке, вывести строку "Отсутствует"
# Пример:
# 5 8 2 7 8 8 18 148
# 8
# Вывод:
# 1 4 5

# a = input('Введите числа через пробел: ')
# c = int(input('число: '))
# #
# b = [int(i) for i in a.split()]   # подумать над оптимизацией до двух строк
# for ind, i in enumerate(b):
#     if i == c:
#         print(ind, end=' ')
# if c not in b:
#     print('Отсутствует')


# a = input('Введите числа через пробел: ')
# c = int(input('число: '))
#
# b = [int(i) for i in a.split()]   # подумать над оптимизацией до двух строк
# print(*[ind for ind, i in enumerate(b) if i == c])

# 2. Дан список целых чисел в котором есть два нуля. Вывести сумму чисел, которые находятся между нулями.
# s = [1, 7, 0, 5, 4, 1, 0, 8, 9]  -> 10
# s = [1, 7, 0, 5, 4, 1, 0, 8, 9]
# a = []
# for ind, i in enumerate(s):
#     if i == 0:
#         a.append(ind)
# print(sum(s[a[0]:a[1]]))

# s = [1, 7, 0, 5, 4, 1, 0, 8, 9]
# a = [ind for ind, i in enumerate(s) if i == 0]
# print(sum(s[a[0]:a[1]]))

# s = [1, 7, 0, 5, 4, 1, 0, 8, 9]
# a = s.index(0)
# b = s.index(0, a + 1)
# print(sum(s[a:b]))

# 3. Дан список целых чисел в котором есть как минимум два нуля. Вывести сумму чисел, которые находятся
# между последними двумя нулями. s = [1, 0, 7, 5, 0, 4, 0, 5, 4, 1, 0, 8, 9]  -> 10

# s = [1, 0, 7, 5, 0, 4, 0, 5, 4, 1, 0, 8, 9]
# a = []
# for ind, i in enumerate(s):
#     if i == 0:
#         a.append(ind)
# print(sum(s[a[-2] + 1:a[-1]]))

# s = [1, 0, 7, 5, 0, 4, 0, 5, 4, 1, 0, 8, 9]
# a = [ind for ind, i in enumerate(s) if i == 0]
# print(sum(s[a[-2] + 1:a[-1]]))

# s = [1, 0, 7, 5, 0, 4, 0, 5, 4, 1, 0, 8, 9]
# s.reverse()
# a = s.index(0)
# b = s.index(0, a + 1)
# print(sum(s[a:b]))

# 4. Дан список целых чисел. Вывести максимальное количество его одинаковых элементов и сам элемент.
# s = [0, 1, 1, 1, 2, 3, 3, 4] -> 'Элемент: 1, повторений: 3'
# s = [0, 1, 1, 1, 2, 3, 3, 4]
# a = []
# for i in s:
#     a.append(s.count(i))
# print('Элемент:', s.index(a.index(max(a))), 'повторений:',  max(a))

# s = [0, 1, 1, 1, 2, 3, 3, 4]
# a = [s.count(i) for i in s]
# print(a)
# print('Элемент:', s.index(a.index(max(a))), 'повторений:',  max(a))

# s = [0, 1, 1, 1, 2, 3, 3, 4]
# a = max(s, key=s.count)
# print('Элемент:', a, 'повторений:', s.count(a))


# разделение по строке
# Шахматная доска:
#  1  2  3  4  5  6  7  8
#  9 10 11 12 13 14 15 16
# 17 18 19 20 21 22 23 24
# 25 26 27 28 29 30 31 32
# 33 34 35 36 37 38 39 40
# 41 42 43 44 45 46 47 48
# 49 50 51 52 53 54 55 56
# 57 58 59 60 61 62 63 64



# for i in range(1, 65):
#     print(f'{i:>2}', end=' ')
#     if i % 8 == 0:
#         print('\n', end='')

# for j in range(8):  # 0 - 7
#     for i in range(1, 9):
#         print(f'{i + 8 * j:>2}', end=' ')
#     print()

# A1 A2 A3 A4 A5 A6 A7 A8
# B1 B2 B3 B4 B5 B6 B7 B8
# C1 C2 C3 C4 C5 C6 C7 C8
# D1 D2 D3 D4 D5 D6 D7 D8
# E1 E2 E3 E4 E5 E6 E7 E8
# F1 F2 F3 F4 F5 F6 F7 F8
# G1 G2 G3 G4 G5 G6 G7 G8
# H1 H2 H3 H4 H5 H6 H7 H8

# for j in 'abcdefgh'.upper():
#     for i in range(1, 9):
#         print(f'{j + str(i)}', end=' ')
#         if i % 8 == 0:
#             print('\n', end='')

# for j in 'abcdefgh'.upper():
#     for i in range(1, 9):
#         print(f'{j + str(i)}', end=' ')
#     print()


# 1*. Подсчитать % счастливых шестизначных трамвайных билетиков.
# Билет является счастливым, если сумма его первых трёх цифр равна сумме последних трёх цифр.
# Например, 109208 и 334505 - счастливые, 123456 - нет.
# Номера билетиков лежат в диапазоне 001000 до 999999.
# Ответ написать с точностью до 1 знака после запятой, вида: "Процент счастливых билетиков 2.1%"


# a = 0
# b = 0
# for i in range(1000, 1000000):
#     i = str(i)
#     a += 1    # общее кол-во билетов
#     if len(i) == 4:
#         i = '0' * 2 + i
#     if len(i) == 5:
#         i = '0' + i
#     if int(i[0]) + int(i[1]) + int(i[2]) == int(i[3]) + int(i[4]) + int(i[5]):
#         b += 1    # кол-во счастливых билетов
# print(f'Процент счастливых билетиков {b * 100 / a:.1f}%')


# b = 0
# for i in range(1000, 1_000_000):
#     i = str(i)  # '1 000'
#     if sum(int(j) for j in i[:-3]) == sum(int(k) for k in i[-3:]):
#         b += 1
# print(f'Процент счастливых билетиков {b * 100 / 998999:.1f}%')



# 2. Напишите программу, которая умеет шифровать и расшифровывать шифр подстановки.
# Программа принимает на вход две строки одинаковой длины, на первой строке записаны символы исходного алфавита,
# на второй строке — символы конечного алфавита, после чего идёт строка, которую нужно зашифровать переданным ключом,
# и ещё одна строка, которую нужно расшифровать.
# Пример:
# abcd
# *d%# -
# bacabadaba
# *%*d*%
# Вывод:
# bacabadaba  ->  d*%*d*#*d*
# #*%*d*%  ->  dacabac

# a = 'abcd'
# b = '*d%#'
# c = 'bacabadaba'
# d = '*%*d*%'
#
# dic = dict(zip(a, b))
# print(''.join([dic[j] for j in c]))

# dic = {'a': '*', 'b': 'd', 'c': '%', 'd': '#'}
# for i in dic:
#     for j in c:
#         if i == j:
#             c = c.replace(j, dict[i])
# print(c)
# n = ''
# for j in c:
#     n += dic[j]
# print(n)



# a = 'abcd'
# b = '*d%#'
# c = 'bacabadaba'
# d = '#*%*d*%'
# for i in range(len(c)):
#     for j in range(len(a)):
#         if c[i] == a[j]:
#             print(b[j], end='')
# print()
#
# for i in range(len(d)):
#     for j in range(len(b)):
#         if d[i] == b[j]:
#             print(a[j], end='')

# def cod(x):
#     return ''.join(b[a.index(i)] for i in x)
#
# def decod(x):
#     return ''.join(a[b.index(i)] for i in x)
#
#
# a = 'abcd'
# b = '*d%#'
# c = 'bacabadaba'  # ->  d*%*d*#*d*
# d = '#*%*d*%'
# print(cod(c))
# print(decod(d))


# for ind1, j in enumerate(c):
#     for ind, i in enumerate(a):
#         if c[ind1] == a[ind]:
#           print(b[ind], end='')
# print()
#
# for ind, i in enumerate(d):
#     for ind1, j in enumerate(b):
#         if d[ind] == b[ind1]:
#             print(a[ind1], end='')

# ДЗ:
# 0. Используя list comprehensions, напишите функцию, которая возвращает все четные числа до числа,
# которое передано функции.
# Пример: find_even_nums(8) ➞ 0, 2, 4, 6, 8
# def nums(x):
#     # return [i for i in range(x + 1) if not i % 2]
#     return range(0, x + 1, 2)
#
#
# print(*nums(8), sep=', ')


#
# 1. Создайте функцию, которая принимает одну строку и возвращает другую, в которой каждая буква исходной
# строки повторяется дважды.
# Примеры:
# double_char("String") ➞ "SSttrriinngg"
# double_char("Hello World!") ➞ "HHeelllloo  WWoorrlldd!!"
# double_char("1234! ") ➞ "11223344!!_  "

# def char(x):
#     return ''.join(i * 2 for i in x)
#
#
# print(char('1234! '))


# 2. Необходимо написать функцию, которая вернёт сумму всех элементов списка до n умноженных на свой индекс.
# Для пустого списка возвращаем 0.
# Пример: n = 5, index_multiplier([1, 2, 3, 4, 5]) ➞ 40.

# def sum_list(n):
#     if n == '':
#         return '0'
#     else:
#         a = [i for i in range(1, int(n) + 1)]
#         return a, sum([i * a.index(i) for i in a])
#
# print(sum_list(5))

#Правильное решение
# def index_multiplier(n):
#     return sum(i * ind for ind, i in enumerate(n))
#
#
# print(index_multiplier([1, 2, 3, 4, 5]))

# def sum_list(n):
#     a = [i * ind for ind, i in enumerate(range(1, int(n) + 1))]
#     b = [i for ind, i in enumerate(range(1, int(n) + 1))]
#     return '0' if n == '' else b, sum(a)
#
#
# print(sum_list(''))


# def sum_list(n):
#     if n == '':
#         return '0'
#     else:
#         a = [i * ind for ind, i in enumerate(range(1, n + 1))]
#         b = [i for ind, i in enumerate(range(1, n + 1))]
#         return b, sum(a)
#
#
# print(sum_list(5))

# n = input(':')
# for ind, i in enumerate(range(1, int(n) + 1)):
#     if n != '':
#         a = [i * ind for ind, i in enumerate(range(1, int(n) + 1))]
#         b = [i for ind, i in enumerate(range(1, int(n) + 1))]
#         print(sum(a))
#         break
# else:
#     print('0')

# 3. Написать функцию backward, которая будет возвращать предложение с отзеркаленными словами.
# backward('') == ''
# backward('world') == 'dlrow'
# backward('hello world') == 'olleh dlrow'
# backward('hello   world') == 'olleh   dlrow'
# backward('welcome to a game') == 'emoclew ot a emag'

# def backward(x):
#     # return ' '.join(i[::-1] for i in x.split(' '))
#     return ' '.join(x[::-1].split(' ')[::-1])
#
#
# print(backward('hello world'))
#
# assert  backward('') == ''
# assert  backward('world') == 'dlrow'
# assert  backward('hello world') == 'olleh dlrow'
# assert  backward('hello   world') == 'olleh   dlrow'
# assert  backward('welcome to a game') == 'emoclew ot a emag'

# ДЗ:
# 1. Шифр Цезаря заключается в замене каждого символа входной строки на символ,
# находящийся на несколько позиций левее или правее его в алфавите.
# Для всех символов сдвиг один и тот же. Сдвиг циклический, т.е.
# если к последнему символу алфавита применить единичный сдвиг, то он заменится на первый символ, и наоборот.
# Напишите программу, которая шифрует текст шифром Цезаря.
# Используемый алфавит − пробел и малые символы латинского алфавита:
# ' abcdefghijklmnopqrstuvwxyz'

# Формат ввода:
# На первой строке указывается используемый сдвиг шифрования: целое число.
# Положительное число соответствует сдвигу вправо. На второй строке указывается непустая фраза для шифрования.
#
# Формат вывода:
# Единственная строка, в которой записана фраза: Result: "..." , где вместо многоточия
# внутри кавычек записана зашифрованная последовательность.
#
# Sample Input 1:
# 3
# i am caesar
# Sample Output 1:
# Result: "lcdpcfdhvdu"
#
# Sample Input 2:
# -2
# az
# Sample Output 2:
# Result: "zx"
#
# Sample Input 3:
# 27
# abc
# Sample Output 3:
# Result: "abc"
#
# a = ' abcdefghijklmnopqrstuvwxyz'
# b = int(input('Введите сдвиг: '))
# c = input('Введите текст: ')
# print('Result:', ''.join(a[(a.index(i) + b) % len(a)] for i in c), end= '')


# ДЗ:
# 1. Реализовать функцию cummulate для рассчета накопленных сумм.
# Функция принимает одно или более числовое значение (количество параметров заранее не определено).
# На основе этих значений рассчитываются накопленные суммы, которые сохраняются в списке,
# список возвращается как результат функции. Пример: cummulate(1, 3, 2, 2) -> [1, 4, 6, 8]
# def cummulate(*x):
#     # a = []
#     # b = 0
#     # for i in x:
#     #     b += i
#     #     a.append(b)
#     # return a
#     return [sum(x[:i + 1]) for i in range(len(x))]
#
#
# print(cummulate(1, 3, 2, 2))


#
# 2. Написать функцию expand_intervals распаковки диапазона tuple's в list.
# expand_intervals([(1, 3), (5, 7)])) == [1, 2, 3, 5, 6, 7]
# expand_intervals([(1, 3)])) == [1, 2, 3]
# expand_intervals([])) == []
# expand_intervals([(1, 2), (4, 4), (7, 9)])) == [1, 2, 4, 7, 8, 9]

# def expand_intervals(a):
#     return [k for i, j in a for k in range(i, j + 1)]
#
#
# print(expand_intervals([(1, 3), (5, 7)]))


# def expand_intervals(x):
#   return [j for i in x for j in range(i[0], i[1] + 1)]
#
#
# print(expand_intervals([(1, 2), (4, 4), (7, 9)]))

# 3. В функцию передаются числа, в парметр x значение bool, если True - перемножаем числа, если False - складываем.
# В парметр y приходят значения Positive - умножаем результат на 1, Negative - умножаем на -1.
# print(func(1, 2, 3, 4, 5, x=True, y='Negative'))
# def func(*a, x, y):
#     b = 1 if x else 0
#     for i in a:
#         b = b * i if x else b + i
#     return b if y == 'Positive' else -b
#
#
# print(func(1, 2, 3, 4, 5, x=True, y='Negative'))

# 4. Реализовать функцию repl, которая принимает на вход строку и набор заранее неизвестных параметров.
# Результатом функции является строка, в которой слова совпадающие с именами параметров заменены на значения параметров.
# Пример:
# repl('replace my val abc', my='s1', abc='fff') -> 'replace s1 val fff'

# def repl(x, **y):
#     # for i in x.split():
#     #     for j in y:
#     #         if i == j:
#     #             x = x.replace(i, y[j])
#     # print(x)
#
#     for j in y:
#         x = x.replace(j, y[j])
#     return x
#
# print(repl('replace my val abc', my='s1', abc='fff'))

# 5.Вам дан (tuple), который состоит из int и других tuple. И эти tuple тоже могут внутри иметь tuple.
# Ваша задача узнать на сколько глубока эта структура или какая глубина вложенности этих tuple.
# how_deep((1, 2, 3)) == 1
# how_deep((1, 2, (3,))) == 2
# how_deep((1, 2, (3, (4,)))) == 3
# how_deep(()) == 1
# how_deep(((),)) == 2
# how_deep((((),),)) == 3
# how_deep((1, (2,), (3,))) == 2
# how_deep((1, (), ((),), (3,))) == 3

# АЛГОРИТМ ПОБЕДИТЕЛЯ, НУЖНО НАЙТИ МАКСИМАЛЬНОЕ ЧИСЛО
# a = (1, (), ((),), (3,))
# b = winner = 0
# for i in str(a):
#     if i == '(':
#         b += 1
#         winner = max(winner, b)
#         # if b > winner:
#         #     winner = b
#     elif i == ')':
#         b -= 1
# print(winner)

# 1. Написать программу, которая будет находить любые 2 делителя введённого числа.
# Подумать над оптимизацией алгоритма поиска решения.
# (Например разложить числа: 35, 221, 94412693)

# a = int(input('Введите число: '))
# print(*[i for i in range(2, a + 1) if a % i == 0][:2])

# a = int(input('Введите число:'))
# for i in range(2, a + 1):
#     if a % i == 0:
#         print(i, int(a / i))
#         break

# 2**n  - 1 ЧИСЛО МЕРСЕНА СПОСОБ НАИБОЛЬШЕЙ ВЕРОЯТНОСТИ НАХОЖДЕНИЯ ПРОСТЫХ ЧИСЕЛ, ЧЕМ У ДРУГИХ ФОРМУЛ


# 2. Дан список натуральных чисел A. Поменять местами первую и вторую половины списка.
# a = [5, 4, 7, 16, 3, 90]  -> [16, 3, 90, 5, 4, 7]
# a = [5, 4, 7, 12, 16, 3, 90]  -> [16, 3, 90, 12, 5, 4, 7]

# a = [5, 4, 7, 12, 16, 3, 90]
# k = len(a) // 2
# d = [a[k]] if len(a) % 2 else []
# print(a[-k:] + d + a[:k])
#
# print(int(-5 // 2))  # округление в меньшую сторону
# print(int(-5 / 2))  # отбрасывание дробной части
#
# print(int(7.5 + 0.5))  # 8  математическое округление
# print(int(7.499999 + 0.5))  # 7

# 1 + 1/2 + 1/4 + 1/8 + .... = 2


# print(a[len(a) // 2:] + a[:len(a) // 2] if not len(a) % 2 else a[len(a) // 2 + 1:] + a[len(a) // 2:len(a) // 2 + 1] + a[:len(a) // 2] )

#
# 3. Дан список натуральных чисел A длинной N элементов.
# Сформировать новый список B того же размера по следующему правилу:
# элемент B[K] равен сумме элементов списка A с номерами от K до N.
# a = [1, 3, 7, 4, 10]  -> [25, 24, 21, 14, 10]
# a = [1, 3, 7, 4, 10]
# print([sum(a[i:]) for i in range(len(a))])

# 4. Дан список чисел. Найти максимальное количество четных чисел в наборе, идущих подряд.
# s = [ 1, 7, 0, 5, 4, 9, 8, 4, 2, 1]   -> 3
# s = [1, 7, 0, 5, 4, 9, 8, 4, 2, 1, 2, 4] #  -> 3
# s = [ 1, 7, 0, 5, 4, 9, 8, 4, 2, 1]
# b = winner = 0
# for i in s:
#     if i % 2:
#         b = 0
#     else:
#         b += 1
#         winner = max(winner, b)
# print(winner)

# 5. Вам даны список значений в виде множества (Set) и значение, относительно которого,
# надо найти ближайшее в множестве.
# Если 2 числа находятся на одинаковом расстоянии - необходимо выбрать наименьшее из них.
# nearest_value({4, 7, 10, 11, 12, 17}, 9) == 10
# nearest_value({4, 7, 10, 11, 12, 17}, 8) == 7
# nearest_value({4, 8, 10, 11, 12, 17}, 9) == 8
# nearest_value({4, 9, 10, 11, 12, 17}, 9) == 9
# nearest_value({4, 7, 10, 11, 12, 17}, 0) == 4
# nearest_value({4, 7, 10, 11, 12, 17}, 100) == 17
# nearest_value({5, 10, 8, 12, 89, 100}, 7) == 8
# nearest_value({-1, 2, 3}, 0) == -1
#
# a = {4, 7, 10, 11, 12, 17}
# a = sorted(a)
# b = 8
# c = [abs(i - b) for i in a]
# print(a[c.index(min(c))])
# переделать в функцию и с кей, подумать несколько вариантов
# def nearest_value(a, b):
#     # a = sorted(a)
#     # c = [abs(i - b) for i in a]
#     # return a[c.index(min(c))]
#
#     return min(sorted(a), key=lambda x: abs(x - b))
#
#
# print(nearest_value({-1, 3, 4}, 1))

# print(sorted(students, key=lambda x: x[1])) # х это параметр(в примере это кортеж), после : записываем то что в return
# 6. Толстопальцев, печатая текст, вместо английской буквы 'a' всегда нажимает Caps.
# Нужно написать функцию caps_lock, которая преобразовывает обычный текст в набранный им.
# caps_lock("Why are you asking me that?") == "Why RE YOU sking me thT?"
# caps_lock("Always wanted to visit Zambia.") == "AlwYS Wnted to visit ZMBI."
# lock = "Always wanted to visit Zambia.".split('a')
# lock[1::2] = [i.upper() for i in lock[1::2]]
# print(''.join(lock))

# ДЗ:
# 0. Дан список целых чисел. Выдать в столбик по убыванию "Элемент - Количество элемента в списке".
# Пример:
# a = [6, 1, 3, 3, 5, 6, 6, 7, 8, 7, 6, 1, 3, 3, 5, 6, 6]
# 8 - 1
# 7 - 2
# 6 - 6
# 5 - 2
# 3 - 4
# 1 - 2
# a = [6, 1, 3, 3, 5, 6, 6, 7, 8, 7, 6, 1, 3, 3, 5, 6, 6]
# b = [a.count(i) for i in a]
# c = sorted({(a[ind], b[ind]) for ind, i in enumerate(a)}, reverse=True)
# for i in sorted(set(a), reverse=True):
    # print(f'{i} - {a.count(i)}')

# print(*[f'{i} - {a.count(i)}' for i in sorted(set(a), reverse=True)], sep='\n')

# 1. Найти трёхзначные числа вида abc, которые при возведении в куб цифр числа дают само число abc,
# т.е. a**3 + b**3 + c**3 = abc
#
# for i in range(100, 1000):
#     i = str(i)
#     if int(i) == int(i[0]) ** 3 + int(i[1]) **3 + int(i[2]) ** 3:
#         print(i)

# print(*[i for i in range(100, 1000) if i == sum(int(j) ** 3 for j in str(i))], sep='\n')

## РЕШЕНИЕ МАТЕМАТИЧЕСКОЕ, С ПОМОЩЬЮ РАЗЛОЖЕНИЯ ЧИСЛА НА ДЕСЯТКИ

# a = 0
# b = 0
# c = 0
# for i in range(100, 1000):
#     a = i // 100
#     b = (i // 10) % 10
#     c = i % 10
#     if i == a  ** 3 + b ** 3 + c ** 3:
#         print(i)

# 2. Написать программу, которая будет находить в строке text слова палиндромы
# (слова, читающиеся одинаково в обоих направлениях) и выводить на печать количество найденных слов.
# В строке могут быть знаки препинания.
# После модуля string.
# Пример:
# text = "Swedish pop group ABBA, single Sos unique occo both palindromes."
# palindromes = 4
# text = "Swedish pop group ABBA, single Sos unique occo both palindromes.".lower()
# b = 0
# for i in text.split():
#     if i.strip(',.') == i.strip(',.')[::-1]:
#         b += 1
# print('palindromes =', b)

# РЕШЕНИЕ В ОДНУ СТРОКУ
# text = "Swedish pop group ABBA, single Sos unique occo both palindromes.".lower()
# # b = len([i for i in text.split() if i.strip(',.') == i.strip(',.')[::-1]])
# # b = sum(1 for z in [i.strip(',.') for i in text.split()] if z == z[::-1])
# b = sum(i.strip(',.') == i.strip(',.')[::-1] for i in text.split())
# print(b)
# print('palindromes =', b)


# 4. Пользователь через пробел вводит числа.
# Задание: поменять местами крайние элементы и вывести на экран в формате:
# Число номер 1: x1
# Число номер 2: х2
# ...
# Пример:
# 23 56 34 82 789
# Число номер 1: 789
# Число номер 2: 56
# Число номер 3: 34
# Число номер 4: 82
# Число номер 5: 23

# a = input('Введите числа через пробел: ').split()
# a[0], a[-1] = a[-1], a[0]
# for ind, i in enumerate(a, 1):
#     print(f'Число номер {ind}: {i}')

# 5. Реализовать калькулятор для выражений с обыкновенными дробями.
# Число может быть записано как простое число, правильная, неправильная или смешанная дробь
# (вид записи выражений приведен в примерах).
# Должны поддерживаться операции: +. Выражение включает только одну операцию.
# Результат представить как правильную дробь.
# Примеры:
# 1/2 + 1/4 -> 3/4
# 3/4 + 10 2/5 -> 11 3/20
# 1 3/5 + 2/3 -> 2 4/15
# 1 3/5 + 2 1/6 -> 3 23/30
# 0/5 + 2/4 -> 1/2
# 0/5 + 0/3 -> 0
# 6/10 + 6/10 -> 1 1/5
# 3 + 2/4 -> 3 1/2
# 3/6 + 2 -> 2 1/2
#
# fraction_1 = (input('Введите дробь: ')).split('/')
# if ' ' in fraction_1[0]:
#     fraction_1 = fraction_1[0].split() + [fraction_1[1]]
# fraction_2 = (input('Введите дробь: ')).split('/')
# if ' ' in fraction_2[0]:
#     fraction_2 = fraction_2[0].split() + [fraction_2[1]]
# if len(fraction_1) == 1:
#     c = [i for i in range(1, 1000000) if int(fraction_2[0]) % i == 0]
#     d = [i for i in range(1, 1000000) if int(fraction_2[1]) % i == 0]
#     e = max(set(c).intersection(set(d)))
#     if e != 0:
#         print(f'Результат {int(fraction_1[0])} {int(int(fraction_2[0]) / e)}/{int(int(fraction_2[1]) / e)}')
#     else:
#         print(f'Результат {int(fraction_1[0])} {fraction_2[0]}/{fraction_2[1]}')
# elif len(fraction_2) == 1:
#     c = [i for i in range(1, 1000000) if int(fraction_1[0]) % i == 0]
#     d = [i for i in range(1, 1000000) if int(fraction_1[1]) % i == 0]
#     e = max(set(c).intersection(set(d)))
#     if e != 0:
#         print(f'Результат {int(fraction_2[0])} {int(int(fraction_1[0]) / e)}/{int(int(fraction_1[1]) / e)}')
#     else:
#         print(f'Результат {int(fraction_2[0])} {fraction_1[0]}/{fraction_1[1]}')
# else:
#     denominator_1 = [i for i in range(1, 1000000) if i % int(fraction_1[2]) == 0] if len(fraction_1) == 3 else [i for i in range(1, 1000000) if i % int(fraction_1[1]) == 0]
#     denominator_2 = [i for i in range(1, 1000000) if i % int(fraction_2[2]) == 0] if len(fraction_2) == 3 else [i for i in range(1, 1000000) if i % int(fraction_2[1]) == 0]
#     common_denominator = min(set(denominator_1).intersection(set(denominator_2)))
#     numerator_1 = common_denominator / int(fraction_1[2]) * int(fraction_1[1]) if len(fraction_1) == 3 else common_denominator / int(fraction_1[1]) * int(fraction_1[0])
#     numerator_2 = common_denominator / int(fraction_2[2]) * int(fraction_2[1]) if len(fraction_2) == 3 else common_denominator / int(fraction_2[1]) * int(fraction_2[0])
#     common_numerator = numerator_1 + numerator_2
#     integer_numerator = divmod(common_numerator, common_denominator)
#     if integer_numerator[0] == integer_numerator[1] == 0:
#         print('Результат', 0)
#     elif len(fraction_1) == len(fraction_2) == 2 and int(integer_numerator[0]) == 0:
#             c = [i for i in range(1, 1000000) if int(integer_numerator[1]) % i == 0]
#             d = [i for i in range(1, 1000000) if int(common_denominator) % i == 0]
#             e = max(set(c).intersection(set(d)))
#             if e != 0:
#                 print(f'Результат {int(integer_numerator[1] / e)}/{int(common_denominator / e)}')
#             else:
#                 print(f'Результат {int(integer_numerator[1])}/{common_denominator}')
#     elif len(fraction_1) == len(fraction_2) == 2:
#             c = [i for i in range(1, 1000000) if int(integer_numerator[1]) % i == 0]
#             d = [i for i in range(1, 1000000) if int(common_denominator) % i == 0]
#             e = max(set(c).intersection(set(d)))
#             if e != 0:
#                 print(f'Результат {int(integer_numerator[0])} {int(integer_numerator[1] / e)}/{int(common_denominator / e)}')
#             else:
#                 print(f'Результат {int(integer_numerator[0])} {int(integer_numerator[1])}/{common_denominator}')
#     if len(fraction_1) == len(fraction_2) == 3:
#             c = [i for i in range(1, 1000000) if int(integer_numerator[1]) % i == 0]
#             d = [i for i in range(1, 1000000) if int(common_denominator) % i == 0]
#             e = max(set(c).intersection(set(d)))
#             if e != 0:
#                print(f'Результат {int(integer_numerator[0]) + int(fraction_1[0]) + int(fraction_2[0])} {int(integer_numerator[1] / e)}/{int(common_denominator / e)}')
#             else:
#                 print(f'Результат {int(integer_numerator[0]) + int(fraction_1[0]) + int(fraction_2[0])} {int(integer_numerator[1])}/{int(common_denominator)}')
#     elif len(fraction_1) == 3:
#             c = [i for i in range(1, 1000000) if int(integer_numerator[1]) % i == 0]
#             d = [i for i in range(1, 1000000) if int(common_denominator) % i == 0]
#             e = max(set(c).intersection(set(d)))
#             if e != 0:
#                print(f'Результат {int(integer_numerator[0]) + int(fraction_1[0])} {int(integer_numerator[1] / e)}/{int(common_denominator / e)}')
#             else:
#                 print(f'Результат {int(integer_numerator[0]) + int(fraction_1[0])} {int(integer_numerator[1])}/{common_denominator}')
#     elif len(fraction_2) == 3:
#             c = [i for i in range(1, 1000000) if int(integer_numerator[1]) % i == 0]
#             d = [i for i in range(1, 1000000) if int(common_denominator) % i == 0]
#             e = max(set(c).intersection(set(d)))
#             if e != 0:
#                print(f'Результат {int(integer_numerator[0]) + int(fraction_2[0])} {int(integer_numerator[1] / e)}/{int(common_denominator / e)}')
#             else:
#                 print(f'Результат {int(integer_numerator[0]) + int(fraction_2[0])} {int(integer_numerator[1])}/{common_denominator}')
#


# ДЗ:
# 1. К нам пришла строка зашифрованная шифром Цезаря: htueqlomelnxmowlome
# Мы знаем, что последнее слово cat
# Расшифруйте строку.
# a = ' abcdefghijklmnopqrstuvwxyz'
# b = 'htueqlomelnxmowlome'
# c = 'cat'
# print(''.join(a[a.index(i) - (a.index(b[-len(c)]) - a.index(c[0]))] for i in b))


# for i in b:
#     print(a[a.index(i) - (a.index(b[-len(c)]) - a.index(c[0]))])

# print(a.index(c[-1]))
# print(a.index(b[-1]))


# def cezar(b):
#     a = ' abcdefghijklmnopqrstuvwxyz'
#     return ''.join(a[a.index(i) - 12] for i in b)
#
#
# print(cezar('htueqlomelnxmowlome'))
#

#


# 2. Написать в своей библиотеке функцию multi, которая будет умножать переданные ей числа.

# from my_functions import multi
#
# print(multi(1, 2, 3, 4, 5, 6))



# def multi(*x):
#     b = 1
#     for i in x:
#         b *= i
#
#
#     return b
#
#
# a = multi(1, 5, 6, 8, 10, 50)    # забрала значение из функии в переменную

# 3. Мы получаем от пользователя строку на английском.
# Подсчитать сколько в ней гласных букв. letters = ['a', 'e', 'i', 'o', 'u']
# letters = ['a', 'e', 'i', 'o', 'u']
# a = "Swedish pop group ABBA, single Sos unique occo both palindromes.".lower()
# print(sum(1 for i in a if i in letters))
#
#
# def string(a):
#     letters = ['a', 'e', 'i', 'o', 'u']
#     return sum(1 for i in a.lower() if i in letters)
#
#
# print(string('Swedish pop group ABBA, single Sos unique occo both palindromes.'))

# Решить с помощью map

# def string(x):
#     return x in letters
#
#
# letters = ['a', 'e', 'i', 'o', 'u']
# a = "Swedish pop group ABBA, single Sos unique occo both palindromes.".lower()
# print(sum(list(map(string, a))))

# letters = ['a', 'e', 'i', 'o', 'u']
# a = "Swedish pop group ABBA, single Sos unique occo both palindromes.".lower()
#
# print(sum(map(lambda x: x in letters, a)))
# print(len(tuple(filter(lambda x: x in letters, a))))
# print(len((*(filter(lambda x: x in letters, a)),)))
# print(len([*(filter(lambda x: x in letters, a))]))
#
# print(sum(map(a.count, letters)))



# 4. Дан список целых чисел. Осуществить сдвиг элементов списка влево на одну позицию
# (при этом первый элемент станет последним).
# s = [1, 7, 0, 5, 4, 9, 8] ->  [7, 0, 5, 4, 9, 8, 1]
# s = [1, 7, 0, 5, 4, 9, 8]
# # s.insert(len(s), s.pop(0))
# s.append(s.pop(0))
# print(s)
#
#
# def lit(s):
#     s.insert(len(s), s.pop(0))
#     return s
#
#
# print(lit([1, 7, 0, 5, 4, 9, 8]))

# 5. Дан список целых чисел. Переставить в обратном порядке элементы списка,
# расположенные между его минимальным и максимальным элементами, включая минимальный и максимальный элементы.
# Вывести новый список.
# s = [1, 7, 0, 5, 4, 9, 8] -> [1, 7, 9, 4, 5, 0, 8]
# s = [1, 7, 9, 5, 4, 0, 8] -> [1, 7, 0, 4, 5, 9, 8]

# s = []
# a = s.index(min(s))
# b = s.index(max(s))
# c = s[a:b + 1][::-1] if a < b else s[b:a + 1][::-1]
# print(s[:a] + c + s[b + 1:] if a < b else s[:b] + c + s[a + 1:])
#
#
# def lit(s):
#     a = s.index(min(s))
#     b = s.index(max(s))

    # c = s[a:b + 1][::-1] if a < b else s[b:a + 1][::-1]
    # return s[:a] + c + s[b + 1:] if a < b else s[:b] + c + s[a + 1:]

    # a, b = (a, b) if b > a else (b, a)

#     a, b = sorted((a, b))
#     return s[:a] + s[a:b + 1][::-1] + s[b + 1:]
#
#
# print(lit([1, 7, 0, 5, 4, 9, 8]))


# ДЗ:
# 1. Дан список целых чисел. Удалить из списка все элементы, встречающиеся более двух раз.
# s = [0, 7, 1, 7, 0, 5, 4, 0, 7, 9, 9, 8] -> [1, 5, 4, 9, 9, 8]
# s = [0, 7, 1, 7, 0, 5, 4, 0, 7, 9, 9, 8]
# a = []
# for i in s:
#     if s.count(i) < 3:
#         a.append(i)
# print(a)

# правильные
# print([i for i in s if s.count(i) < 3])
# print(list(filter(lambda x: s.count(x) < 3, s)))

# def func(x):
#     if s.count(x) < 3:
#         return x
#
#
# s = [0, 7, 1, 7, 0, 5, 4, 0, 7, 9, 9, 8]
# print(list(filter(func, s)))




# 2. Пользователь через пробел вводит числа. Найти сумму чисел стоящих на чётных местах.


# a = input(': ').split()
# print(sum(tuple(map(int, a))[1::2]))


#
# 3. У нас есть список с произвольным количеством целых чисел
# s = [23, 546, 2381, 99, 34, 11911]. Найти в списке число с максимальной суммой цифр. Вывести его и сумму цифр.

# def func(x):
#     return sum(map(int, str(x)))
#
# s = [23, 546, 2381, 99, 34, 11911]
# a = max(s, key=func)
# print(a, func(a))
# def func(x):
#     return sum(map(int, str(x)))
#
# s = [23, 546, 2381, 99, 34, 11911]
#
# print(*map(func, s))
# print(s[list(map(func, s)).index(max(list(map(func, s))))], max(list(map(func, s))))

# a = [[2, 3], [5, 4, 6], [2, 3, 8, 1], [9, 9], [3, 4], [1, 1, 9, 1, 1]]
# b = []
# for i in a:
#     b.append(sum(i))
# print(b)
#
# 4. Дано число n. Выдать числа от 2 до n, рядом с каждым числом написать его делители (кроме самого числа).
# Например для n = 6:
# 2 - 1
# 3 - 1
# 4 - 1, 2
# 5 - 1
# 6 - 1, 2, 3

# def func(x):
#     for i in range(1, x):
#         if x % i == 0:
#
#
# n = int(input(': '))
# print(list(filter(func, range(2, n + 1))))

# n = 6
# for i in range(2, n + 1):
#     print(i, '- ', end='')
#     for j in range(1, i):
#         if i % j == 0:
#             print(j, end=' ')
#     print()

# n = 6
# for i in range(2, n + 1):
#     # print(i, '-', end=' ')
#     # print(*filter(lambda x: i % x == 0, range(1, i)), sep=', ')

# длинное решение лучше не применять
#     print(str(i) + ' - ' + ', '.join(map(str, filter(lambda x: i % x == 0, range(1, i)))))


# З:
# 1. Найти все совершенные числа до 1000. Совершенное число - это такое число, которое равно сумме всех своих делителей, кроме себя самого.
# Например, число 6 является совершенным, т.к. кроме себя самого делится на числа 1, 2 и 3, которые в сумме дают 6.
#
# def func(x):
#    b = 0
#    for i in range(1, x):
#       if x % i == 0:
#          b += i
#    if b == x:
#       return True
#
#
# print(*filter(func, range(1, 1000)))

# 2. Дан список целых чисел в виде str. Выдать в столбик по убыванию "Элемент - Количество элемента в списке".
# Пример:
# a = ['6', '1', '3', '3', '51', '6', '6', '17', '8', '17', '6', '1', '3', '3', '51', '6', '6']
# 51 - 2
# 17 - 2
# 8 - 1
# 6 - 6
# 3 - 4
# 1 - 2
#
# a = ['6', '1', '3', '3', '51', '6', '6', '17', '8', '17', '6', '1', '3', '3', '51', '6', '6']
# b = [int(i) for i in a]
# print(*map(lambda x: f'{x} - {b.count(x)}', sorted(set(b), reverse=True)), sep='\n')

# print(*map(lambda x: f'{x} - {a.count(str(x))}', sorted(set(map(int, a)), reverse=True)), sep='\n')

#
# # print(sorted(store, key=store.get))  # key также используется в min, max
#
# def func(x):
#    return map(int, x)
#
#
# a = ['6', '1', '3', '3', '51', '6', '6', '17', '8', '17', '6', '1', '3', '3', '51', '6', '6']


# 3. Дан список чисел. Удалить из этого списка все нечётные числа и вывести список, который получился в результате.
# a = [134, 545, 456, 1, 8, 9, 5]
#
# a = [134, 545, 456, 1, 8, 9, 5]
# for i in a:
#     if i % 2 == 0:
#         print(i)

# print([i for i in a if i % 2 == 0])

# a = [134, 545, 456, 1, 8, 9, 5]
# print(list(filter(lambda x: x % 2 == 0, a)))

# def func(x):
#     return x % 2 == 0


# a = [134, 545, 456, 1, 8, 9, 5]
# print(*filter(func, a))
#
# a = [134, 545, 456, 1, 8, 9, 5]
## при использовании функций удаления обязательно делаем копию исходника
# for i in a[:]:
#     if i % 2:
#         a.remove(i)
# print(a)



# 4. Дано 2 списка чисел. Объединить их так, чтобы в полученном списке любое число встречалось не более двух раз.
#    a = [1, 2, 2, 3]   b = [0, 0, 1, 1, 2, 3, 3, 4] -> [0, 0, 1, 1, 2, 2, 3, 3, 4]
#
# a = [1, 2, 2, 3]
# b = [0, 0, 1, 1, 2, 3, 3, 4]
# for i in a:
#     for j in b:
#         if i == j and b.count(j) < 2:
#             b.append(i)
#     if i not in b:
#         b.append(i)
# print(b)
# b.extend(a)

# c = []
# for i in a + b:
#     if c.count(i) < 2:
#         c.append(i)
# print(c)

# ДЗ:
# 0. В таск-трекере помещается до 100 задач. Если разбросать их все на 4 разработчиков, то останется еще 3 задачи.
# Если делить на троих или на пятерых — останется 2 задачи. Сколько всего задач в трекере?
# (filter + lambda) (решить в одну строку)

# for i in range(100):
#     if i % 4 == 3 and i % 3 == 2 and i % 5 == 2:
#         print(i)

# print(*filter(lambda x: x % 4 == 3 and x % 3 == 2 and x % 5 == 2, range(1, 100)))
#
# 1. Есть список a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]. Выведите все элементы, которые меньше 5. (решить в одну строку)

# a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
# for i in a:
#     if i < 5:
#         print(i, end=' ')

# a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
# print(*filter(lambda x: x < 5, a))

# 2. Пользователь через пробел вводит числа. Найти сумму чисел стоящих на чётных местах. (решить в одну строку)

# print(sum(tuple(map(int, input('nums: ').split()))[1::2]))

# 3. Дан список целых чисел. Определить являются ли эти числа Перестановкой.
# (Перестановка - когда числа можно переставить так, что они будут последовательностью подряд идущих чисел.
# Например s = [4, 2, 5, 3] является перестановкой, т.к.
# можно из этого списка сформировать последовательность s = [2, 3, 4, 5] ) (решить в одну строку)

# def num(x):
#     for ind, i in enumerate(s[:-1]):
#         if ind + 1 == len(s):
#             continue
#         if s[ind + 1] - i != 1:
#             return False
#     return True
#
#
# s = [4, 2, 5, 3]
# s.sort()
# print(*filter(num, s))

# s = [4, 2, 5, 3]
# s.sort()
# for ind, i in enumerate(s[:-1]):
#     if s[ind + 1] - i != 1:
#         print('Не перестановка')
#         break
# else:
#     print('Перестановка')
#
# print('yes' if sorted(s) == list(range(min(s), max(s) + 1)) else 'no')





# 4. Дан список целых чисел идущих подряд, все элементы которого, кроме первого, упорядочены по возрастанию.
# Сделать список упорядоченным, переместив первый элемент на новую позицию. (sort/sorted не используем)
# s = [6, 3, 4, 5, 7, 8, 9] -> [3, 4, 5, 6, 7, 8, 9] (решить в одну строку)

# s = [6, 3, 4, 5, 7, 8, 9]
# a = tuple(s.index(i) for i in s if s[0] < i)
# s.append(s.pop(0)) if s[0] == max(s) else s.insert(a[0] - 1, s.pop(0))
# print(s)
# print(list(range(min(s), max(s) + 1)))


#
# 5. Напишите программу, которая выводит часть последовательности 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ...
# (число повторяется столько раз, чему равно).
# На вход программе передаётся число n > 0 — столько элементов последовательности должна отобразить программа.
# На выходе ожидается последовательность чисел, записанных через пробел в одну строку.
# Например, если n = 7, то программа должна вывести 7 чисел:
# 1 2 2 3 3 3 4.
# При n = 100 000 - первые 100 000 чисел. Время выполнения 5 сек.


# n = int(input('num:'))
# a = ''.join(map(lambda x: str(x) * int(x), range(1, n)))[:n]
#
# print(*map(int, a))

# n = int(input('num:'))
# a = ''.join(str(i) * i for i in range(1, n))[:n]
# print(*map(int, a))

# n = int(input('num:'))
# a = 0
# for i in range(1, n + 1):
#     for j in range(i):
#         print(i, end=' ')
#         a += 1
#         if a == n:
#             exit()


# ДЗ:
# 1. Дана строка с целыми числами через пробел. Если есть 0, напечатать "Ноль есть", иначе "Ноля нет".
# Решить в одну строчку используя any, а затем all.
# a = '1 2 3 100 5 6'
# print( "Ноль есть" if any(i == '0' for i in a.split()) else "Ноля нет")
# print( "Ноль есть" if any(filter(lambda x: x == '0', a.split())) else "Ноля нет")
#
# print("Ноля нет" if all(int(i) for i in a.split()) else "Ноль есть")
# print("Ноля нет" if all(map(int, a.split())) else "Ноль есть")


# 2. Нужно убедится есть ли в каждом классе отличник (ученик имеющий максимальный бал - 5).
# Формат ввода: в первой строке вводится количество классов, затем в каждом классе вводится:
# количество учеников в классе и следующая строка Фамилия Оценка через пробел.
# В решение использовать any или all.

# amount_classes = int(input('Кол-во классов: '))
# amount_pupils = int(input('Кол-во учеников: '))
#
# test = []
# for i in range(amount_classes):
#     test.append(any([input('Фамилия: ')[-1] == '5' for j in range(amount_pupils)]))
#
# print('есть' if all(test) else 'нет')
#
# test = [[input('Фамилия: ')[-1] for j in range(amount_pupils)] for i in range(amount_classes)]
# print('есть' if all('5' in i for i in test) else 'нет')


# test = ['5' in [input('Фамилия: ')[-1] for _ in range(amount_pupils)] for _ in range(amount_classes)]
# print('есть' if all(test) else 'нет')



# 3. У нас есть тройка победителей с данными: Иван - 10 баллов, Семён - 20 баллов, Игорь - 30 баллов.
# Вывести их циклом каждого с новой строки.
# Затем 15 баллов набирает Света. Вывести новую тройку победителей.
# pobediteli = {'Ivan': 10, 'Semen': 20, 'Igor': 30}

# pobediteli = {'Semen': 20, 'Ivan': 10, 'Igor': 30}
# b = sorted(pobediteli, key=pobediteli.get, reverse=True)
# print(*[f'{ind}. {i} - {pobediteli[i]}' for ind, i in enumerate(b, 1)], sep='\n')
# pobediteli.update({'Sveta': 15})
# print()
# b = sorted(pobediteli, key=pobediteli.get, reverse=True)[:3]
# print(*[f'{ind}. {i} - {pobediteli[i]}' for ind, i in enumerate(b, 1)], sep='\n')

# 4. У нас есть список с данными учеников и преподавателей школы. Ученики занимаются на некоторых факультативах.
# Нужно выбрать только тех, которые имеют факультативы.
# Результат должен быть в виде словаря: Фамилия: [данные по этому человеку]:
# Пример:
# lists = [['Иванов', 'Ученик'], ['Петров', 'Ученик'], ['Иванов', 'Математика'], ['Петров', 'Физика'], ['Сидоров', 'Преподаватель'], ['Иванов', 'Химия']]
# -> {'Иванов': ['Ученик', 'Математика', 'Химия'], 'Петров': ['Ученик', 'Физика']}

# lists = [['Иванов', 'Ученик'], ['Петров', 'Ученик'], ['Иванов', 'Математика'], ['Петров', 'Физика'], ['Сидоров', 'Преподаватель'], ['Иванов', 'Химия']]
# name, subject = zip(*lists)
# print(name, subject)
# name1 = dict(zip(name, subject))
# print(name1)

# первый елемент списка
# a = {i[0]: i[1] for i in lists}
# b = {}
# for i, j in lists:
# #     b.setdefault(i, [])
# #     b[i].append(j)
# print(b)
#
# print({i: b[i] for i in b if len(b[i]) > 1})
# print({i: j for i, j in b.items() if len(j) > 1})
# print(dict(filter(lambda x: len(x[1]) > 1, b.items())))

# ДЗ:
# 1. Посчитайте сумму квадратов всех двузначных чисел, делящихся на 9.
# При решении задачи используйте комбинацию функций filter, map, sum.
# Примечание: на 9 должно делиться исходное двузначное число, а не его квадрат.

# print(sum(i ** 2 for i in range(10, 100) if i % 9 == 0))
# #
# print(sum(map(lambda x: x ** 2, filter(lambda x: x % 9 == 0, range(10, 100)))))
# print(sum(map(lambda x: x ** 2, range(18, 100, 9))))


# 2. Винни-Пух попросил вас посмотреть, есть ли в его стихах ритм. Поскольку разобраться в его кричалках
# не настолько просто, насколько легко он их придумывает, вам стоит написать программу.
# Винни-Пух считает, что ритм есть, если число слогов (т.е. число гласных букв 'аоуюяеёиэы')
# в каждой фразе стихотворения одинаковое. Фраза может состоять из одного слова,
# если во фразе несколько слов, то они разделяются дефисами. Фразы отделяются друг от друга пробелами.
# Стихотворение Винни-Пух вбивает в программу с клавиатуры.
# В ответе напишите «Порядок», если с ритмом всё в порядке и «Не порядок», если с ритмом всё не в порядке.
# Можно ли эту задачу решить в одну строку?
# парам пам-пом -> Порядок
# пара пам -> Не порядок
# a = 'пара пам-пам пара памо'
# b = 'аоуюяеёиэы'
# c = [[i.count(j) for j in b] for i in a.split()]
# print(c)
# d = [sum(i) for i in c]
# print(d)
# print('Порядок' if all(d[ind + 1] == i for ind, i in enumerate(d[:-1])) else 'Не порядок')
# c = [tuple(i.count(j) for j in b) for i in a.split()]
# print('Порядок' if len({sum(i) for i in c}) == 1 else 'Не порядок')



# 3. Словарь кодов товаров:
# <товар_1>: <id_товара_1>

# goods = {
#     'Лампа': '12345',
#     'Стол': '23456',
#     'Диван': '34567',
#     'Стул': '45678'}

# Есть словарь списков количества товаров на складе.
#
# store = {
#     '12345': [
#         {'quantity': 27, 'price': 42},
#     ],
#     '23456': [
#         {'quantity': 22, 'price': 510},
#         {'quantity': 32, 'price': 520},
#     ],
#     '34567': [
#         {'quantity': 2, 'price': 1200},
#         {'quantity': 1, 'price': 1150},
#     ],
#     '45678': [
#         {'quantity': 50, 'price': 100},
#         {'quantity': 12, 'price': 95},
#         {'quantity': 43, 'price': 97},
#     ],
# }

# Задание: вывести суммарную стоимость каждого ВИДА товара на складе c помощью циклов.
# Формат вывода:
#   <товар_1> - <кол-во_товара_1> шт, общая стоимость <общая_стоимость_товара_1> руб
#   <товар_2> - <кол-во_товара_2> шт, общая стоимость <общая_стоимость_товара_2> руб


# a = []
# for i in goods:
#     b = 0
#     c = 0
#     for j in store[goods[i]]:
#         b += j['quantity'] * j['price']
#         c += j['quantity']
#     print(f'{i} - {c} шт, общая стоимость {b} руб')

# Заполнить квадрат N*N(кол-во столбцов и строк) цифрами по часовой стрелке. через двухмерный список.
# Вывод:
#  1  2  3  4  5  6
# 20 21 22 23 24  7
# 19 32 33 34 25  8
# 18 31 36 35 26  9
# 17 30 29 28 27 10
# 16 15 14 13 12 11
import random
from pprint import pprint
# vectors = ((1, 0), (0, 1), (-1, 0), (0, -1))
# n = int(input('num: '))
# a = [[0] * n for i in range(n)]
# pprint(a)
# b = [[i for i in range(1, n + 1)] for j in range(n)]
# pprint(b)
# b = 1
# for i in a:
#     b += 1
#     i[0][0] = b
#     if i[1]

# n = int(input(':'))
# square = [[0] * n for i in range(n)]
# vectors = ((1, 0), (0, 1), (-1, 0), (0, -1))
# over = n * n
# x = 0
# y = 0
# count = 1
# while count <= over:
#     square[y][x] = count
#     if y <= x + 1 and x + y < n - 1:
#         x += 1
#     elif y < x and x + y >= n - 1:
#         y += 1
#     elif y >= x and x + y > n - 1:
#         x -= 1
#     else:
#         y -= 1
#     count += 1
# # pprint(square)
#
# for i in square:
#     b = 0
#     for j in i:
#         b += 1
#         print(f'{j:>2}', end=' ')
#         if b % n == 0:
#             print('\n', end='')


# n = int(input(':'))
# square = [[0] * n for i in range(n)]
# vectors = ((1, 0), (0, 1), (-1, 0), (0, -1))  # направление движения по часовой стрелке
#
# x = -1
# y = 0
# step = number_step = 0

# while step < n * n:
#     x1 = x + vectors[number_step][0]
#     y1 = y + vectors[number_step][1]
#     if -1 < x1 < n and -1 < y1 < n and square[y1][x1] == 0:
#         step += 1
#         square[y1][x1] = step
#         x = x1
#         y = y1
#     else:
        # number_step = 0 if number_step == 3 else number_step + 1
#         number_step = (number_step + 1) % 4
#
# for i in square:
#     b = 0
#     for j in i:
#         b += 1
#         print(f'{j:>2}', end=' ')
#         if b % n == 0:
#             print('\n', end='')



# ДЗ:
# Переменная phones_list хранит структуру данных со списком контактов, содержащим номера телефонов.
# переделать без доп переменной
# phones_list = [{'name': 'Ivan', 'city': 'Moscow', 'phones': ['232-19-55', '+7 (916) 230-00-75']},
#                {'name': 'Anna', 'city': 'Samara', 'phones': ['200-11-15']},
#                {'name': 'Anna', 'city': 'Vologda', 'phones': ['+7 (931) 711-00-75']},
#                {'name': 'Nikolay', 'city': 'Moscow', 'phones': ['+7 (916) 778-71-05', '331-66-11', '783-33-85']},
#                {'name': 'Ivan', 'city': 'Moscow', 'phones': ['+7 (916) 205-41-05', '232-19-55']},
#                {'name': 'Anna', 'city': 'Samara', 'phones': ['+7 (916) 105-13-56']}
#                ]
#
# Преобразовать этот список в словарь, ключами в котором являются города, а значениями - словари,
# в которых номерам телефонов людей, проживающих в данном городе, сопоставлены имена этих людей.
# Пример результата преобразования для данных из переменной phones_list:
#
# {'Moscow': {'+7 (916) 205-41-05': 'Ivan',
#            '+7 (916) 230-00-75': 'Ivan',
#            '+7 (916) 778-71-05': 'Nikolay',
#            '232-19-55': 'Ivan',
#            '331-66-11': 'Nikolay',
#            '783-33-85': 'Nikolay'},
# 'Samara': {'+7 (916) 105-13-56': 'Anna', '200-11-15': 'Anna'},
# 'Vologda': {'+7 (931) 711-00-75': 'Anna'}}

from pprint import pprint
# a = {}
# for i in phones_list:
#     a.setdefault(i['city'], {})
#     for j in i['phones']:
#         a[i['city']].setdefault(j, i["name"])
# pprint(a)

# a = {}
# for i in phones_list:
#     a.setdefault(i['city'], {})
#     a[i['city']].update({j: i["name"] for j in i['phones']})
#     for j in i['phones']:
#         a[i['city']].update({j: i["name"]})
# pprint(a)

# ДЗ
# человек - город, имя
# Переменная phones_list хранит структуру данных со списком контактов, содержащим номера телефонов.
# Из списка необходимо удалить дубликаты (записи о людях с совпадающим именем и городом).
# При удалении дубликатов необходимо телефоны из удаляемой записи добавить в сохраняемую запись (если их там еще нет).
# То есть номера телефонов, которые уже есть в сохраняемой записи, переносить из дубликата не надо
# (чтобы избежать дублирования номеров телефонов).
#
# phones_list = [{'name': 'Ivan', 'city': 'Moscow', 'phones': ['232-19-55', '+7 (916) 230-00-75']},
#                {'name': 'Anna', 'city': 'Samara', 'phones': ['200-11-15']},
#                {'name': 'Anna', 'city': 'Vologda', 'phones': ['+7 (931) 711-00-75']},
#                {'name': 'Nikolay', 'city': 'Moscow', 'phones': ['+7 (916) 778-71-05', '331-66-11', '783-33-85']},
#                {'name': 'Ivan', 'city': 'Moscow', 'phones': ['+7 (916) 205-41-05', '232-19-55']},
#                {'name': 'Anna', 'city': 'Samara', 'phones': ['+7 (916) 105-13-56']}
#                ]
#
# Результат:
# [{'city': 'Moscow',  'name': 'Ivan',  'phones': ['232-19-55', '+7 (916) 230-00-75', '+7 (916) 205-41-05']},
#  {'city': 'Samara',  'name': 'Anna',  'phones': ['200-11-15', '+7 (916) 105-13-56']},
#  {'city': 'Vologda', 'name': 'Anna', 'phones': ['+7 (931) 711-00-75']},
#  {'city': 'Moscow',  'name': 'Nikolay',  'phones': ['+7 (916) 778-71-05', '331-66-11', '783-33-85']}]
# a = {(i['city'], i['name']) for i in phones_list}
# b = {i: {} for i in a}
# for j in phones_list:
#     x = (j['city'], j['name'])
#     if b[x]:
#         b[x]['phones'] = list(set(b[x]['phones'] + j['phones']))
#     else:
#         b[x].update(j)
#
#
# pprint(list(b.values()))

# for ind, i in enumerate(phones_list[:-1]):
#     for j in phones_list[ind + 1:]:
#         if i['name'] == j['name'] and i['city'] == j['city']:
#             i['phones'] = list(set(i['phones'] + j['phones']))
#             phones_list.remove(j)
#
# pprint(phones_list)

# ДЗ:
# 1. Задана строка, в которой через запятую перечислены слова.
# Создать словарь, в котором ключами будут перемешанные слова из строки, а значениями -
# текст "номер {номер-слова-в-строке} в строке".
# Например:
# 'ten,one,five,two,three,four'
# преобразовать в :
# {'three': 'номер 5 в строке', 'one': 'номер 2 в строке', 'ten': 'номер 1 в строке', 'two': 'номер 4 в строке', 'five': 'номер 3 в строке', 'four': 'номер 6 в строке'}.
#
from pprint import pprint
# a = 'ten,one,five,two,three,four'.split(',')
#
# print({i: f'номер {a.index(i) + 1} в строке' for i in set(a)})

# a = 'ten,one,five,two,three,four'
# b = {}
# for ind, i in enumerate(a.split(',')):
#     b[i] = b.setdefault(i, f'номер {ind + 1} в строке')
# pprint(b)


# 2. Задан список с вложенными списками (элементы - числа).
# Для всех списков с длиной больше 3: оставить только три первых элемента, прибавив к третьему все удаленные элементы.
# Например, из [[1,2], [3,4,4,3,1], [4,1,4,5]] получить [[1, 2], [3, 4, 8], [4, 1, 9]].


# a = [[1,2], [3,4,4,3,1], [4,1,4,5]]
# print([i[:2] + [sum(i[2:])] if len(i) > 3 else i for i in a])

# Существует список, который содержит целые числа или другие вложенные списки, которые могут содержать
# ещё несколько списков и целых чисел, которые затем... ну, вы поняли. Вы должны поместить все целые
# значения в один плоский список. Порядок должен быть такой же, как и в первоначальном списке,
# с представлением строки слева направо.
# рекурсия
# b = []
# for i in a:
#     if type(i) == list:
#         b.extend(i)
#     else:
#         b.append(i)
# print(b)


# def flat_list(a):
#     x = []
#     for i in a:
#         if type(i) == list:
#             x.extend(flat_list(i))
#         else:
#             x.append(i)
#     return x
#
# if __name__ == '__main__':
#     assert flat_list([1, 2, 3]) == [1, 2, 3], "First"
#     assert flat_list([1, [2, 2, 2], 4]) == [1, 2, 2, 2, 4], "Second"
#     assert flat_list([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]]) == [2, 4, 5, 6, 6, 6, 6, 6, 7], "Third"
#     assert flat_list([-1, [1, [-2], 1], -1]) == [-1, 1, -2, 1, -1], "Four"
#     print('Done! Check it')


# 1. Написать функционал работы склада товаров:
# Меню:
# 1 - Создать склад
# 2 - Приход-расход
# 3 - Состояние склада
# 4 - Выход.
# Сделайте свой выбор: должно выпадать все меню
# создать меню
# при выборе цифры должна выполняться функция под этим номером до
# s = ['яблоки', 'груши']

# print('┌───────┬──────────────┬───┬───┬───┬───┬───┬───┬───┬───┬───┐')
# print('│ Номер │ Наименование │ Количество │ D │ E │ F │ G │ H │ I │ J │')
# print('├─────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤')
# for n, i in enumerate(s):
#     print(f'│ {n} │ {i}  │ · │ K │ · │ K │ · │ · │ K │')
# print('└─────┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘ ')

# # ┌─────┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐            ┌─────┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐
# # │ AI  │ A │ B │ C │ D │ E │ F │ G │ H │ I │ J │            │ YOU │ A │ B │ C │ D │ E │ F │ G │ H │ I │ J │
# # ├─────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤            ├─────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
# # │  0  │ · │ · │ · │ · │ K │ · │ K │ · │ · │ K │            │  0  │ K │ · │ · │ · │ · │ · │ · │ · │ K │ · │
# # │  1  │ K │ · │ · │ · │ K │ · │ · │ · │ · │ · │            │  1  │ K │ · │ K │ K │ K │ K │ · │ · │ · │ · │
# # │  2  │ K │ · │ K │ · │ K │ · │ · │ K │ K │ K │            │  2  │ · │ · │ · │ · │ · │ · │ · │ · │ · │ · │
# # │  3  │ · │ · │ K │ · │ · │ · │ · │ · │ · │ · │            │  3  │ · │ · │ · │ · │ · │ K │ K │ · │ · │ · │
# # │  4  │ · │ · │ · │ · │ K │ · │ · │ · │ · │ · │            │  4  │ K │ · │ · │ K │ · │ · │ · │ · │ · │ · │
# # │  5  │ · │ · │ · │ · │ K │ · │ · │ K │ · │ · │            │  5  │ · │ · │ · │ K │ · │ · │ K │ · │ · │ · │
# # │  6  │ · │ · │ · │ · │ · │ · │ · │ · │ · │ · │            │  6  │ K │ · │ · │ · │ · │ · │ K │ · │ · │ · │
# # │  7  │ · │ · │ · │ K │ K │ K │ K │ · │ · │ · │            │  7  │ · │ · │ · │ · │ · │ · │ K │ · │ · │ · │
# # │  8  │ · │ · │ · │ · │ · │ · │ · │ · │ · │ · │            │  8  │ K │ K │ K │ · │ · │ · │ · │ · │ K │ · │
# # │  9  │ · │ · │ · │ K │ · │ · │ · │ · │ · │ · │            │  9  │ · │ · │ · │ · │ · │ · │ · │ · │ · │ · │
# # └─────┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘            └─────┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘

# Меню:
# 1 - Создать склад
# 2 - Приход-расход, добавить дату ввода в файл
# 3 - Состояние склада,
# 4 состояние склада по дате в таблице
# 5 - Выход.


from colorama import *
import time

# while True:
#     print('┌─────┬──────────────────┐\n'
#           '│ №   │ Меню:            │\n'
#           '├─────┼──────────────────┤\n'
#           '│  1  │ Создать склад    │\n'
#           '│  2  │ Приход-расход    │\n'
#           '│  3  │ Состояние склада │\n'
#           '│  4  │ Выход.           │\n'
#           '└─────┴──────────────────┘')
#
#     # a = input('\n'.join(f'│ {c+1} │ {i:<16} │' for c, i in enumerate(b[1:])) + '\n' + 'Сделайте свой выбор: ')
#     a = input('Сделайте свой выбор: ')
#     if a == '4':
#         break
#     elif a == '1':
#         with open('store.txt', 'w', encoding='UTF-8') as f:
#             pass
#         print('Создан файл Store')
#     elif a == '2':
#         print('2. ПРИХОД И РАСХОД ТОВАРА:')
#         with open('store.txt', 'a', encoding='UTF-8') as f:
#             while True:
#                 a = time.ctime(time.time())
#                 b = input('Введите фрукт и количество через пробел (выход - exit): ')
#                 if b == 'exit':
#                     break
#                 f.write(f'{b}   -> Дата ввода - {a}  \n')
#     elif a == '3':
#         with open('store.txt', 'r', encoding='UTF-8') as f:
#             a = time.ctime(time.time())
#             d = {}
#             for line in f.readlines():
#                 fruit, num = line.split()[:2]
#                 if fruit in d.keys():
#                     d[fruit] += int(num)
#                 else:
#                     d[fruit] = int(num)
#                 # if d[fruit] == 0:
#                 #     del d[fruit]
#         print(' Состояние склада на :\n '
#               f'{a}')
#         print('┌──────────────┬────────────┐\n'
#               '│ Наименование │ Количество │\n'
#               '├──────────────┼────────────┤')
#         for x, y in d.items():
#             # print(f'{x} -> {y}')
#             if y:
#                 print(f'│{x:^14}│{y:^12}│')
#         print('└──────────────┴────────────┘')
#         # print('┌──────────────┬────────────┐''\n'
#         #       '│ Наименование │ Количество │''\n'
#         #       '├──────────────┼────────────┤')
#         # for x, y in d.items():
#         #     # print(f'{x} -> {y}')
#         #     if y:
#         #         print(f'│{x:^14}│{y:^12}│')
#         # print('└──────────────┴────────────┘')
#     else:
#         print('Введите числа от 1го до 4х')

# пунк 5 движение по складу с какой по какую дату(алгоритм подсчета не меняется)
# 2022-01-30 20:32:28, 2022-01-31 20:32:28
#
# from datetime import datetime
# def menu():
#     print(datetime.now())
#     init(autoreset=True)
#     print('\033[5;30;47m ┌─────┬──────────────────────────┐')
#     print('\033[5;30;47m │ №   │ Меню:                    │')
#     print('\033[5;30;47m ├─────┼──────────────────────────┤')
#     print('\033[5;30;47m │  1  │ Создать склад            │')
#     print('\033[5;30;47m │  2  │ Приход-расход            │')
#     print('\033[5;30;47m │  3  │ Состояние склада         │')
#     print('\033[5;30;47m │  4  │ Состояние склада -> Дата │')
#     print('\033[5;30;47m │  5  │ Движение по складу       │')
#     print('\033[5;30;47m │  6  │ Выход.                   │')
#     print('\033[5;30;47m └─────┴──────────────────────────┘')
#     print()
#
# def one():
#     with open('store.txt', 'w', encoding='UTF-8') as f:
#             pass
#     print('\033[5;30;43m Создан файл Store')
#     print()
# #
# def two():
#     print('\033[5;30;43m 2. ПРИХОД И РАСХОД ТОВАРА:')
#     print()
#     with open('store.txt', 'a', encoding='UTF-8') as f:
#         while True:
#             # a = time.ctime(time.time())
#             b = input('\033[5;37;40m Введите фрукт и количество через пробел (выход - exit): ')
#             if b == 'exit':
#                 break
#             f.write(f'{b} {datetime.now()}\n')
# #
# #
# def three(data_end, data_start=None):
#     def print_table():
#         print('\033[5;37;40m┌──────────────┬────────────┐')
#         print('\033[5;37;40m│ Наименование │ Количество │')
#         print('\033[5;37;40m├──────────────┼────────────┤')
#         for x, y in d.items():
#             # print(f'{x} -> {y}')
#             if y:
#                 print(f'\033[5;37;40m│{x:^14}│{y:^12}│')
#         print('\033[5;37;40m└──────────────┴────────────┘')
#         print()
#
#     d = {}
#     with open('store.txt', 'r', encoding='UTF-8') as f:
#         for line in f.readlines():
#             fruit, num, data2 = line.split(maxsplit=2)
#             data2 = datetime.strptime(data2.rstrip(), '%Y-%m-%d %H:%M:%S.%f')
#             if not data_start:
#                 data_start = datetime(1, 1, 1, 0, 0, 0)
#             if data2 >= data_start and data2 <= data_end:
#                 if fruit in d.keys():
#                     d[fruit] += int(num)
#                 else:
#                     d[fruit] = int(num)
#
#            # if d[fruit] == 0:
#            #     del d[fruit]
#     print_table()
#     print()
#
# def four():
#     c = datetime.strptime(input('\033[5;37;40m Введите дату в этом формате 2022-01-31 20:32:34 : '), '%Y-%m-%d %H:%M:%S')
#     three(c)
#
# def five():
#     c = datetime.strptime(input('\033[5;37;40m Введите дату "Начало периода" в этом формате 2022-01-31 20:32:34 : '), '%Y-%m-%d %H:%M:%S')
#     d = datetime.strptime(input('\033[5;37;40m Введите дату "Конец периода" в этом формате 2022-01-31 20:32:34 : '), '%Y-%m-%d %H:%M:%S')
#     three(d, c)
#
# while True:
#     menu()
#     a = input('\033[5;30;47m Сделайте свой выбор: ')
#     print()
#     if a == '6':
#         break
#     elif a == '1':
#         one()
#     elif a == '2':
#         two()
#     elif a == '3':
#         three(data_end=datetime.now())
#     elif a =='4':
#         four()
#     elif a =='5':
#         five()
#     else:
#         print('\033[5;30;41m Введите числа от 1го до 6ти')
#



# def one():
#     b = []
#     while True:
#         a = input('Введите фрукты и кол-во через пробел(выход-exit): ')
#         if a == 'exit':
#             break
#         b.append(a.split())
#     return b
#
# def two(d):
#     for i in b:
#         fruit, num = i
#         if fruit in d.keys():
#             d[fruit] += int(num)
#         else:
#             d[fruit] = int(num)
#     return d
#
#
# def three():
#     print(d)
#
#
#
# d = {}
# while True:
#     print('1-создать список\n' '2-перенос даных из списка в словарь\n' '3-вывести словарь на печать\n' '4-Выход')
#     a = input('Сделай свой выбор:')
#     if a == '4':
#         break
#     if a == '1':
#         b = one()
#     elif a == '2':
#         d = two(d)
#         print('Словарь создан')
#     elif a == '3':
#         three()
#     else:
#         print('Введите числа от 1го до 4х')

# Задача: Выбор тайного друга

# Вам даётся список учеников.
# Напишите программу для игры в «тайного друга».
# Она должна случайным образом назначить каждому ученику тайного друга, который будет незаметно делать для этого ученика
# что-то хорошее.
#
# Обратите внимание, что нельзя быть тайным другом самому себе и нельзя быть тайным другом для нескольких учеников.
# Формат ввода: Имена и фамилии, по одной на каждой строке.
#
# Данные ввода берём из файла:
# Иван Иванов
# Саша Самойлов
# Юля Северная
#
# Формат вывода
# На каждой строчке имя и фамилия ученика и имя и фамилия его тайного друга, разделённые дефисом.
#
# Иван Иванов - Юля Северная
# Юля Северная - Саша Самойлов
# Саша Самойлов - Иван Иванов

# with open('pupil.txt', 'w', encoding='UTF-8') as p:
#     while True:
#         a = input('введите имя и фамилию ученика(выход - exit):')
#         if a == 'exit':
#             break
#         p.write(a + '\n')


#
# with open('pupil.txt', 'r', encoding='UTF-8') as p:
#     # a = p.readlines()
#     # a = list(set(map(str.rstrip, a)))
#     # b = [f'{i} - {a[ind - 1]}' for ind, i in enumerate(a)]
#     # print(*set(b), sep='\n')
#
#     a = p.readlines()
#     # a = list(map(str.rstrip, a))
#     # random.shuffle(a)
#     # b = [f'{i} - {a[ind - 1]}' for ind, i in enumerate(a)]
#     # random.shuffle(b)
#     # print(*b, sep='\n')
#
# a2 = a.copy()
# while [1 for i, e in enumerate(a) if e == a2[i]]:
#     random.shuffle(a2)
# print(a)
# print(a2)

# ДЗ, try/except:
# 1. Дана строка. Если она представляет собой запись целого числа int,
# то вывести 1, если float — вывести 2; если строку нельзя преобразовать в число, то вывести 0.
# a = input('Сделайте ввод: ')
# if a.isdigit():
#     print(1)
# else:
#     try:
#         float(a)
#         print(2)
#     except ValueError:
#         print(0)


# 2. Дана строка S. Если S является допустимым именем файла, то создать пустой файл с этим именем
# и записать туда True. Если файл с именем S создать нельзя, то вывести 'Недопустимое имя файла!'.
#
# +=[]:;«,./?\*"><|

# s = input('Ведите название файла:')
# try:
#     with open(s, 'w', encoding='UTF-8') as s1:
#         s1.write('True')
# except (FileNotFoundError, OSError):
#     print('Недопустимое имя файла!')

# З, повторяем map:
# 1. Создайте функцию к map, которая добавит к каждой комнате в списке rooms элемент с именем square
# содержащий её площадь. Вывести строки с данными о названии комнаты и её площади.

# rooms = [
#     {"name": "кухня", "length": 6, "width": 4},
#     {"name": "комната 1", "length": 5.5, "width": 4.5},
#     {"name": "комната 2", "length": 5, "width": 4},
#     {"name": "комната 3", "length": 7, "width": 6.3}]


# for i in rooms:
#     square = i["length"] * i["width"]
#     print(i["name"], square)

# print(*map(lambda x: f"{x['name']} square {x['length'] * x['width']}", rooms), sep="\n")
# from pprint import pprint
#
# def fun(a):
#     a.update({'square': a["length"] * a['width']})
#     return a
#
#
# print(*[f'{i["name"]} - {i["square"]}' for i in map(fun, rooms)], sep='\n')


# 2. В списке digits содержатся строки с числами. Эти строки содержат ошибки: лишние пробелы и неправильные
# разделители целой и десятичной части.
# Создайте функцию, которая сначала исправит ошибки в строках, а затем преобразует каждую строку в число.
# Примените эту функцию ко всем элементам digits с помощью map. Выдать список чисел.
# digits = ["12", "145", "  45", "12.4", "45,14", "15 645"]  ->  [12, 145, 45, 12.4, 45.14, 15645]

# digits = ["12", "145", "  45", "12.4", "45,14", "15 645"]
# a = map(lambda x: x.replace(',','.').replace(' ', ''), digits)
# print(list(map(lambda x: float(x) if '.'  in x else int(x), a)))
# def fun(a):
#     a = a.replace(',','.').replace(' ', '')
#     return float(a) if '.' in a else int(a)
#
#
# print(list(map(fun, digits)))



# Создайте и верните новый итерируемый объект, который содержит те же элементы, что и элементы итерируемого
# аргумента, но с обратным порядком элементов внутри каждого максимального строго восходящего подсписка.
# Эта функция не должна изменять содержимое исходного итерируемого объекта.
#
# reverse_ascending ( [ 1 , 2 , 3 , 4 , 5 ] ) == [ 5 , 4 , 3 , 2 , 1 ]
# reverse_ascending ( [ 5 , 7 , 10 , 4 , 2 , 7 , 8 , 1 , 3 ] ) == [ 10 , 7 , 5 , 4 , 8 , 7 , 2 , 3 , 1 ]

# a = [1, 1, 2]
# # a += [float('-inf')] # для второго решения
# b = [-1] + [ind for ind, i in enumerate(a[:-1]) if i >= a[ind + 1]] + [len(a)]
# print(b)
# c = [a[i + 1:b[ind + 1] + 1][::-1] for ind, i in enumerate(b[:-1])]
# print(sum(c, []))
# второе решение
# b = 0
# c = []
# for ind, i in enumerate(a[:-1]):
#     if i > a[ind + 1]:
#         c.extend(a[b:ind + 1])
#         b = ind + 1
# print(c + a[b:])
# print(c)
# print(float('-inf')) # минус бесконечность(какое-то число которое меньше любого елемента в списке)
# print(float('inf')) # бесконечность(какое-то число которое , больше любого елемента в списке)

# Даны два списка A и B одинакового размера. Сформировать новый список C того же размера,
# каждый элемент которого равен произведению из элементов массивов A и B с тем же индексом.
# Например: a = [1, 2, 3, 4]   b = [5, 6, 7, 8]  -> c = [5, 12, 21, 32]

# a = [1, 2, 3, 4]
# b = [5, 6, 7, 8]
# c = [i * b[ind] for ind, i in enumerate(a)]
# print([i * b[ind] for ind, i in enumerate(a)])

# print([i * j for i, j in zip(a, b)])
# Дан список чисел. Найти максимальное количество четных чисел в наборе, идущих подряд.
# s = [1, 7, 0, 5, 4, 9, 8, 4, 2, 1, 2, 4] #  -> 3

# b = winner = 0
# # c = []
# s = [1, 7, 0, 5, 4, 9, 8, 4, 2, 1, 2, 4]
# for i in s:
#     if i % 2:
#         b = 0
#     else:
#         b += 1
#         winner = max(winner, b)
#     # c.append(b)
#
# # print(max(c))
# print(winner)

# Дан набор содержащий только нули и единицы.Найти количество элементов
# в самой длинной последовательности одинаковых чисел.
# s = [ 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1]   -> 4
# s = [1, 0, 1, 0, 1]

# a = 0
# c = []
# for ind, i in enumerate(s[:-1]):
#     if i == s[ind + 1]:
#         a += 1
#     else:
#         a = 0
#     c.append(a)
# print(max(c) + 1)

# s = [1, 0, 1, 0, 1]
# a = winner = 1
# for ind, i in enumerate(s[:-1]):
#     if i == s[ind + 1]:
#         a += 1
#         winner = max(winner, a)
#     else:
#         a = 1
# print(winner)
