# 1) Напишите функцию modify_list(l), которая принимает на вход список целых чисел, удаляет из него все нечётные
# значения, а чётные нацело делит на два.

# def modify_list(l):
#     new_list = []
#     for i in l:
#         if i % 2 == 0:
#             new_list.append(int(i / 2))
#     return new_list
#
#
# new_list = []
# while True:
#
#     a = int(input())
#     if a == 0:
#         break
#     new_list.append(a)
#
# print(modify_list(new_list))

# 2) Напишите функцию f(x), которая возвращает значение следующей функции, определённой на всей числовой прямой:
# x <= -2
# -2 < x <= 2
# 2 < x

# def fun(x):
#     if x <= -2:
#         return 1 - (x + 2) ** 2
#     elif -2 < x <= 2:
#         return -x / 2
#     elif 2 < x:
#         return (x - 2) ** 2 + 1
#
#
# print(fun(5))

# 3) Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь d и два числа: key и value.
# Если ключ key key key есть в словаре d, то добавьте значение value value value в список, который хранится по этому ключу.
# Если ключа key key key нет в словаре, то нужно добавить значение в список по ключу 2∗key. Если и ключа 2∗key нет, то нужно
# добавить ключ 2∗key в словарь и сопоставить ему список из переданного элемента [value].
#
# vock = {
#     3: 4,
#     4: 5,
#     5: 6
# }
#
# def fun(d, key, value):
#     new_list = []
#     for i in d:
#         if i == key:
#             new_list.append(d[i])
#             return new_list
#         elif 2 * key  in d:
#             new_list.append(d[2 * key])
#             return new_list
#     if 2 * key not in d:
#         d.update({2 * key: value})
#         return d
# print(fun(vock, 2, 8))
#
# def update_dictionary(d, key, value):
#     if key not in d:
#         key = 2 * key
#     if key not in d:
#         d[key] = list()
#     d[key].append(value)

# 4) Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве используется в этой книге.
# Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, разделённые пробелом и
# вывести получившуюся статистику.
# Программа должна считывать одну строку со стандартного ввода и выводить для каждого уникального слова в этой строке число
# его повторений (без учёта регистра) в формате "слово количество" (см. пример вывода).
# Порядок вывода слов может быть произвольным, каждое уникальное слово должно выводиться только один раз.
# Sample Output 1:
#
# ac 1
# a 2
# abc 2
# bcd 1
# aa 2

# words = 'a A a'.lower()
# words = words.split()
#
# a = []
# for i in words:
#     a.append(f'{i} {words.count(i)}')
# print(*set(a), sep='\n')

# 5) Напишите программу, которая считывает строку с числом n, которое задаёт количество чисел, которые нужно считать.
# Далее считывает n строк с числами xi , по одному числу в каждой строке. Итого будет n+1 строк.
# При считывании числа xi  программа должна на отдельной строке вывести значение f(xi). Функция f(x) уже реализована
# и доступна для вызова.
# Функция вычисляется достаточно долго и зависит только от переданного аргумента x. Для того, чтобы уложиться в
# ограничение по времени, нужно избежать повторного вычисления значений.

# 6) Напишите программу, которая считывает текст из файла (в файле может быть больше одной строки) и выводит самое
# частое слово в этом тексте и через пробел то, сколько раз оно встретилось. Если таких слов несколько, вывести
# лексикографически первое (можно использовать оператор < для строк).

# with open('C:\\Users\\VIka\Desktop\\dataset_3363_3.txt', 'r', encoding= 'UTF-8') as file:
# with open('dataset_3363_3.txt', 'r', encoding= 'UTF-8') as file:
#     str1 = file.read()
#     str1 = str1.lower().split()
#     a = []
#     for i in sorted(str1):
#         a.append(str1.count(i))
#     print(str1[a.index(max(a))], max(a))

