# Парадигмы программирования
# 1. Функциональное
# 2. Обьектно-ориентированное
# 3. Линейное

# Главные принципы ООП
# 1. Инкапсуляция
# 2. Наследование
# 3. Полиморфизм
# Дополнительный - абстракция

# class Person:  # навзание класса всегда с большой буквы
#     pass
#
#
# maxim = Person()  # создание обьекта класса, создание обьекта происходит с помощью конструктора, который работает автоматически
# viktory = Person()

# class Person:
#     def say_hello(self):   # метод, все функции в классе это методы, self -это ссылка на обьекты в которых используется этот метод
#         print('Hello')
#
#     def say(self, message):
#         print(message)
#
#
# object_1 = Person()  # обьект
# object_1.say_hello() # для обьекта вызываем метод say_hello, результатом которогу будет выполенние метода(функции)
# object_1.say('Good day today')  # если в метод передаеся параметры кроме self, то при вызове, в оьект их нужно указать

# class Person:
#     def say(self, message):  # параметр self можно передать в другой метод
#         print(message)
#
#     def say_hello(self):   #  создаем другой метод и передаем в него параметр self
#         self.say('Good day today')  #  вызываем другой метод класса
#
#
# object_1 = Person()
# object_1.say_hello()

# Конструктор создает обьекты(вызывается при создании обьектов)

class Person:
    def __init__(self): # метод контруктора, всегда принимает self
        print('Создание обьекта Python')


object_1 = Person()


